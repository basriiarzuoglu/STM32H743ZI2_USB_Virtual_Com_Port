
STM32H743ZI2_USB_Virtual_Com_Port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  24000000  08007ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b28  24000184  0800805c  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24001cac  0800805c  00021cac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012fea  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002fc4  00000000  00000000  0003319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e38  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ce0  00000000  00000000  00036f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000379c0  00000000  00000000  00037c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012cc6  00000000  00000000  0006f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150bec  00000000  00000000  000822fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d2eea  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000038c0  00000000  00000000  001d2f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000184 	.word	0x24000184
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007e54 	.word	0x08007e54

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000188 	.word	0x24000188
 80002d4:	08007e54 	.word	0x08007e54

080002d8 <CDC_ReceiveCallback>:
	uint32_t systemTime;
}Scheduler;
Scheduler schedule;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(buf,len);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f007 f8f9 	bl	80074e0 <CDC_Transmit_FS>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 fa60 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f814 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f000 f88e 	bl	8000424 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000308:	f007 f822 	bl	8007350 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(schedule.task1Hz)
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <main+0x2c>)
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0fb      	beq.n	800030c <main+0x14>
	  {
		  CDC_Transmit_FS((uint8_t*)"some data",sizeof("some data"));
 8000314:	210a      	movs	r1, #10
 8000316:	4804      	ldr	r0, [pc, #16]	; (8000328 <main+0x30>)
 8000318:	f007 f8e2 	bl	80074e0 <CDC_Transmit_FS>
		  schedule.task1Hz = 0;
 800031c:	4b01      	ldr	r3, [pc, #4]	; (8000324 <main+0x2c>)
 800031e:	2200      	movs	r2, #0
 8000320:	711a      	strb	r2, [r3, #4]
	  if(schedule.task1Hz)
 8000322:	e7f3      	b.n	800030c <main+0x14>
 8000324:	240001a0 	.word	0x240001a0
 8000328:	08007e6c 	.word	0x08007e6c

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09c      	sub	sp, #112	; 0x70
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000336:	224c      	movs	r2, #76	; 0x4c
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f007 fd82 	bl	8007e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2220      	movs	r2, #32
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f007 fd7c 	bl	8007e44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800034c:	2002      	movs	r0, #2
 800034e:	f001 ff9b 	bl	8002288 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	4b31      	ldr	r3, [pc, #196]	; (800041c <SystemClock_Config+0xf0>)
 8000358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035a:	4a30      	ldr	r2, [pc, #192]	; (800041c <SystemClock_Config+0xf0>)
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <SystemClock_Config+0xf0>)
 8000364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <SystemClock_Config+0xf4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000374:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <SystemClock_Config+0xf4>)
 8000376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <SystemClock_Config+0xf4>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000388:	bf00      	nop
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <SystemClock_Config+0xf4>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000396:	d1f8      	bne.n	800038a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000398:	2301      	movs	r3, #1
 800039a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	2302      	movs	r3, #2
 80003a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a6:	2302      	movs	r3, #2
 80003a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80003ae:	2318      	movs	r3, #24
 80003b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003b2:	2302      	movs	r3, #2
 80003b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003b6:	2304      	movs	r3, #4
 80003b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003be:	230c      	movs	r3, #12
 80003c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 ffa4 	bl	800231c <HAL_RCC_OscConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003da:	f000 f8e5 	bl	80005a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003de:	233f      	movs	r3, #63	; 0x3f
 80003e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e2:	2303      	movs	r3, #3
 80003e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003ea:	2308      	movs	r3, #8
 80003ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2101      	movs	r1, #1
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fb98 	bl	8002b38 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800040e:	f000 f8cb 	bl	80005a8 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3770      	adds	r7, #112	; 0x70
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	58000400 	.word	0x58000400
 8000420:	58024800 	.word	0x58024800

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800043a:	4b20      	ldr	r3, [pc, #128]	; (80004bc <MX_GPIO_Init+0x98>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <MX_GPIO_Init+0x98>)
 8000442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <MX_GPIO_Init+0x98>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <MX_GPIO_Init+0x98>)
 800045a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045e:	4a17      	ldr	r2, [pc, #92]	; (80004bc <MX_GPIO_Init+0x98>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_GPIO_Init+0x98>)
 800046a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_GPIO_Init+0x98>)
 8000478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <MX_GPIO_Init+0x98>)
 800047e:	f043 0302 	orr.w	r3, r3, #2
 8000482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <MX_GPIO_Init+0x98>)
 8000488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	603b      	str	r3, [r7, #0]
 8000492:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000494:	2360      	movs	r3, #96	; 0x60
 8000496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	2302      	movs	r3, #2
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80004a4:	2309      	movs	r3, #9
 80004a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	4619      	mov	r1, r3
 80004ae:	4804      	ldr	r0, [pc, #16]	; (80004c0 <MX_GPIO_Init+0x9c>)
 80004b0:	f000 fb5e 	bl	8000b70 <HAL_GPIO_Init>

}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	58024400 	.word	0x58024400
 80004c0:	58020400 	.word	0x58020400

080004c4 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	schedule.systemTime++;
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4a32      	ldr	r2, [pc, #200]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 80004d0:	6093      	str	r3, [r2, #8]

	if(schedule.systemTime % 20 == 0)
 80004d2:	4b31      	ldr	r3, [pc, #196]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 80004d4:	6899      	ldr	r1, [r3, #8]
 80004d6:	4b31      	ldr	r3, [pc, #196]	; (800059c <HAL_SYSTICK_Callback+0xd8>)
 80004d8:	fba3 2301 	umull	r2, r3, r3, r1
 80004dc:	091a      	lsrs	r2, r3, #4
 80004de:	4613      	mov	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	1aca      	subs	r2, r1, r3
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d102      	bne.n	80004f2 <HAL_SYSTICK_Callback+0x2e>
		schedule.task50Hz = 1;
 80004ec:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]

	if(schedule.systemTime % 50 == 0)
 80004f2:	4b29      	ldr	r3, [pc, #164]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 80004f4:	689a      	ldr	r2, [r3, #8]
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <HAL_SYSTICK_Callback+0xdc>)
 80004f8:	fba3 1302 	umull	r1, r3, r3, r2
 80004fc:	091b      	lsrs	r3, r3, #4
 80004fe:	2132      	movs	r1, #50	; 0x32
 8000500:	fb01 f303 	mul.w	r3, r1, r3
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d102      	bne.n	8000510 <HAL_SYSTICK_Callback+0x4c>
		schedule.task20Hz = 1;
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 800050c:	2201      	movs	r2, #1
 800050e:	705a      	strb	r2, [r3, #1]

	if(schedule.systemTime % 100 == 0)
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <HAL_SYSTICK_Callback+0xdc>)
 8000516:	fba3 1302 	umull	r1, r3, r3, r2
 800051a:	095b      	lsrs	r3, r3, #5
 800051c:	2164      	movs	r1, #100	; 0x64
 800051e:	fb01 f303 	mul.w	r3, r1, r3
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <HAL_SYSTICK_Callback+0x6a>
		schedule.task10Hz = 1;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 800052a:	2201      	movs	r2, #1
 800052c:	709a      	strb	r2, [r3, #2]

	if(schedule.systemTime % 200 == 0)
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 8000530:	689a      	ldr	r2, [r3, #8]
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <HAL_SYSTICK_Callback+0xdc>)
 8000534:	fba3 1302 	umull	r1, r3, r3, r2
 8000538:	099b      	lsrs	r3, r3, #6
 800053a:	21c8      	movs	r1, #200	; 0xc8
 800053c:	fb01 f303 	mul.w	r3, r1, r3
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d102      	bne.n	800054c <HAL_SYSTICK_Callback+0x88>
		schedule.task5Hz = 1;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 8000548:	2201      	movs	r2, #1
 800054a:	70da      	strb	r2, [r3, #3]

	if(schedule.systemTime % 500 == 0)
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 800054e:	689a      	ldr	r2, [r3, #8]
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <HAL_SYSTICK_Callback+0xe0>)
 8000552:	fba3 1302 	umull	r1, r3, r3, r2
 8000556:	095b      	lsrs	r3, r3, #5
 8000558:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800055c:	fb01 f303 	mul.w	r3, r1, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d102      	bne.n	800056c <HAL_SYSTICK_Callback+0xa8>
		schedule.task2Hz = 1;
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 8000568:	2201      	movs	r2, #1
 800056a:	715a      	strb	r2, [r3, #5]

	if(schedule.systemTime % 1000 == 0)
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_SYSTICK_Callback+0xe0>)
 8000572:	fba3 1302 	umull	r1, r3, r3, r2
 8000576:	099b      	lsrs	r3, r3, #6
 8000578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800057c:	fb01 f303 	mul.w	r3, r1, r3
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d102      	bne.n	800058c <HAL_SYSTICK_Callback+0xc8>
		schedule.task1Hz = 1;
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_SYSTICK_Callback+0xd4>)
 8000588:	2201      	movs	r2, #1
 800058a:	711a      	strb	r2, [r3, #4]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	240001a0 	.word	0x240001a0
 800059c:	cccccccd 	.word	0xcccccccd
 80005a0:	51eb851f 	.word	0x51eb851f
 80005a4:	10624dd3 	.word	0x10624dd3

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_MspInit+0x30>)
 80005bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005c0:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_MspInit+0x30>)
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_MspInit+0x30>)
 80005cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005d0:	f003 0302 	and.w	r3, r3, #2
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	58024400 	.word	0x58024400

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler+0x4>

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>

080005fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <UsageFault_Handler+0x4>

08000606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f936 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000638:	f000 fa93 	bl	8000b62 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <OTG_FS_IRQHandler+0x10>)
 8000646:	f000 fd9a 	bl	800117e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	24001684 	.word	0x24001684

08000654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <SystemInit+0xec>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800065e:	4a38      	ldr	r2, [pc, #224]	; (8000740 <SystemInit+0xec>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000668:	4b36      	ldr	r3, [pc, #216]	; (8000744 <SystemInit+0xf0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f003 030f 	and.w	r3, r3, #15
 8000670:	2b06      	cmp	r3, #6
 8000672:	d807      	bhi.n	8000684 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000674:	4b33      	ldr	r3, [pc, #204]	; (8000744 <SystemInit+0xf0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	4a31      	ldr	r2, [pc, #196]	; (8000744 <SystemInit+0xf0>)
 800067e:	f043 0307 	orr.w	r3, r3, #7
 8000682:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <SystemInit+0xf4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <SystemInit+0xf4>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <SystemInit+0xf4>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <SystemInit+0xf4>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	492b      	ldr	r1, [pc, #172]	; (8000748 <SystemInit+0xf4>)
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <SystemInit+0xf8>)
 800069e:	4013      	ands	r3, r2
 80006a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemInit+0xf0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 0308 	and.w	r3, r3, #8
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemInit+0xf0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f023 030f 	bic.w	r3, r3, #15
 80006b6:	4a23      	ldr	r2, [pc, #140]	; (8000744 <SystemInit+0xf0>)
 80006b8:	f043 0307 	orr.w	r3, r3, #7
 80006bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemInit+0xf4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <SystemInit+0xf4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemInit+0xf4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <SystemInit+0xf4>)
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <SystemInit+0xfc>)
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <SystemInit+0xf4>)
 80006d8:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <SystemInit+0x100>)
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <SystemInit+0xf4>)
 80006de:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <SystemInit+0x104>)
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <SystemInit+0xf4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <SystemInit+0xf4>)
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <SystemInit+0x104>)
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <SystemInit+0xf4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <SystemInit+0xf4>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <SystemInit+0x104>)
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <SystemInit+0xf4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <SystemInit+0xf4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <SystemInit+0xf4>)
 8000706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <SystemInit+0xf4>)
 800070e:	2200      	movs	r2, #0
 8000710:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <SystemInit+0x108>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <SystemInit+0x10c>)
 8000718:	4013      	ands	r3, r2
 800071a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800071e:	d202      	bcs.n	8000726 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <SystemInit+0x110>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <SystemInit+0x114>)
 8000728:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800072c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <SystemInit+0xec>)
 8000730:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000734:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00
 8000744:	52002000 	.word	0x52002000
 8000748:	58024400 	.word	0x58024400
 800074c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000750:	02020200 	.word	0x02020200
 8000754:	01ff0000 	.word	0x01ff0000
 8000758:	01010280 	.word	0x01010280
 800075c:	5c001000 	.word	0x5c001000
 8000760:	ffff0000 	.word	0xffff0000
 8000764:	51008108 	.word	0x51008108
 8000768:	52004000 	.word	0x52004000

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000770:	f7ff ff70 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079a:	f007 fb2f 	bl	8007dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f7ff fdab 	bl	80002f8 <main>
  bx  lr
 80007a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007ac:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 80007b0:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 80007b4:	24000184 	.word	0x24000184
  ldr r4, =_ebss
 80007b8:	24001cac 	.word	0x24001cac

080007bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC3_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c6:	2003      	movs	r0, #3
 80007c8:	f000 f98c 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007cc:	f002 fb6a 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 80007d0:	4602      	mov	r2, r0
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_Init+0x68>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	f003 030f 	and.w	r3, r3, #15
 80007dc:	4913      	ldr	r1, [pc, #76]	; (800082c <HAL_Init+0x6c>)
 80007de:	5ccb      	ldrb	r3, [r1, r3]
 80007e0:	f003 031f 	and.w	r3, r3, #31
 80007e4:	fa22 f303 	lsr.w	r3, r2, r3
 80007e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_Init+0x68>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_Init+0x6c>)
 80007f4:	5cd3      	ldrb	r3, [r2, r3]
 80007f6:	f003 031f 	and.w	r3, r3, #31
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000800:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_Init+0x70>)
 8000802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <HAL_Init+0x74>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	200f      	movs	r0, #15
 800080c:	f000 f814 	bl	8000838 <HAL_InitTick>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e002      	b.n	8000820 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800081a:	f7ff fecb 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	58024400 	.word	0x58024400
 800082c:	08007ec0 	.word	0x08007ec0
 8000830:	24000004 	.word	0x24000004
 8000834:	24000000 	.word	0x24000000

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_InitTick+0x60>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e021      	b.n	8000890 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <HAL_InitTick+0x64>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_InitTick+0x60>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f971 	bl	8000b4a <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f93b 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_InitTick+0x68>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2400000c 	.word	0x2400000c
 800089c:	24000000 	.word	0x24000000
 80008a0:	24000008 	.word	0x24000008

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2400000c 	.word	0x2400000c
 80008c8:	240001ac 	.word	0x240001ac

080008cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	240001ac 	.word	0x240001ac

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff ffee 	bl	80008cc <HAL_GetTick>
 80008f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fc:	d005      	beq.n	800090a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_Delay+0x44>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090a:	bf00      	nop
 800090c:	f7ff ffde 	bl	80008cc <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8f7      	bhi.n	800090c <HAL_Delay+0x28>
  {
  }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2400000c 	.word	0x2400000c

0800092c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetREVID+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	0c1b      	lsrs	r3, r3, #16
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	5c001000 	.word	0x5c001000

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <__NVIC_SetPriorityGrouping+0x40>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	4313      	orrs	r3, r2
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <__NVIC_SetPriorityGrouping+0x40>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00
 8000988:	05fa0000 	.word	0x05fa0000

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <__NVIC_EnableIRQ+0x38>)
 80009c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff8e 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff29 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff40 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff33 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffa4 	bl	8000aa0 <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b66:	f7ff fcad 	bl	80004c4 <HAL_SYSTICK_Callback>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b7e:	4b89      	ldr	r3, [pc, #548]	; (8000da4 <HAL_GPIO_Init+0x234>)
 8000b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b82:	e194      	b.n	8000eae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	2101      	movs	r1, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8186 	beq.w	8000ea8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d00b      	beq.n	8000bbc <HAL_GPIO_Init+0x4c>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d007      	beq.n	8000bbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb0:	2b11      	cmp	r3, #17
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b12      	cmp	r3, #18
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 0201 	and.w	r2, r3, #1
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0xee>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d123      	bne.n	8000ca6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	69b9      	ldr	r1, [r7, #24]
 8000ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0203 	and.w	r2, r3, #3
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80e0 	beq.w	8000ea8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_GPIO_Init+0x238>)
 8000cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cee:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_GPIO_Init+0x238>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_GPIO_Init+0x238>)
 8000cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d06:	4a29      	ldr	r2, [pc, #164]	; (8000dac <HAL_GPIO_Init+0x23c>)
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <HAL_GPIO_Init+0x240>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d052      	beq.n	8000dd8 <HAL_GPIO_Init+0x268>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_GPIO_Init+0x244>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d031      	beq.n	8000d9e <HAL_GPIO_Init+0x22e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <HAL_GPIO_Init+0x248>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d02b      	beq.n	8000d9a <HAL_GPIO_Init+0x22a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_GPIO_Init+0x24c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d025      	beq.n	8000d96 <HAL_GPIO_Init+0x226>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_GPIO_Init+0x250>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01f      	beq.n	8000d92 <HAL_GPIO_Init+0x222>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <HAL_GPIO_Init+0x254>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d019      	beq.n	8000d8e <HAL_GPIO_Init+0x21e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <HAL_GPIO_Init+0x258>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x21a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_GPIO_Init+0x25c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00d      	beq.n	8000d86 <HAL_GPIO_Init+0x216>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_GPIO_Init+0x260>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0x212>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_GPIO_Init+0x264>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_Init+0x20e>
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	e02d      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d7e:	230a      	movs	r3, #10
 8000d80:	e02b      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d82:	2308      	movs	r3, #8
 8000d84:	e029      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d86:	2307      	movs	r3, #7
 8000d88:	e027      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	e025      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d8e:	2305      	movs	r3, #5
 8000d90:	e023      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e021      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e01f      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e01d      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e01b      	b.n	8000dda <HAL_GPIO_Init+0x26a>
 8000da2:	bf00      	nop
 8000da4:	58000080 	.word	0x58000080
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58000400 	.word	0x58000400
 8000db0:	58020000 	.word	0x58020000
 8000db4:	58020400 	.word	0x58020400
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	58020c00 	.word	0x58020c00
 8000dc0:	58021000 	.word	0x58021000
 8000dc4:	58021400 	.word	0x58021400
 8000dc8:	58021800 	.word	0x58021800
 8000dcc:	58021c00 	.word	0x58021c00
 8000dd0:	58022000 	.word	0x58022000
 8000dd4:	58022400 	.word	0x58022400
 8000dd8:	2300      	movs	r3, #0
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	f002 0203 	and.w	r2, r2, #3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4093      	lsls	r3, r2
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dea:	4938      	ldr	r1, [pc, #224]	; (8000ecc <HAL_GPIO_Init+0x35c>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f47f ae63 	bne.w	8000b84 <HAL_GPIO_Init+0x14>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3724      	adds	r7, #36	; 0x24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	58000400 	.word	0x58000400

08000ed0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	b08f      	sub	sp, #60	; 0x3c
 8000ed4:	af0a      	add	r7, sp, #40	; 0x28
 8000ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e116      	b.n	8001110 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d106      	bne.n	8000f02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f006 fc37 	bl	8007770 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fb34 	bl	800458e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	687e      	ldr	r6, [r7, #4]
 8000f2e:	466d      	mov	r5, sp
 8000f30:	f106 0410 	add.w	r4, r6, #16
 8000f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f40:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f44:	1d33      	adds	r3, r6, #4
 8000f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f003 f9ff 	bl	800434c <USB_CoreInit>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2202      	movs	r2, #2
 8000f58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e0d7      	b.n	8001110 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fb22 	bl	80045b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e04a      	b.n	8001008 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	333d      	adds	r3, #61	; 0x3d
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	333c      	adds	r3, #60	; 0x3c
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	b298      	uxth	r0, r3
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	3342      	adds	r3, #66	; 0x42
 8000fae:	4602      	mov	r2, r0
 8000fb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	333f      	adds	r3, #63	; 0x3f
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3344      	adds	r3, #68	; 0x44
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3348      	adds	r3, #72	; 0x48
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3350      	adds	r3, #80	; 0x50
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	3301      	adds	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d3af      	bcc.n	8000f72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e044      	b.n	80010a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	3301      	adds	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3b5      	bcc.n	8001018 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	687e      	ldr	r6, [r7, #4]
 80010b4:	466d      	mov	r5, sp
 80010b6:	f106 0410 	add.w	r4, r6, #16
 80010ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ca:	1d33      	adds	r3, r6, #4
 80010cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ce:	6838      	ldr	r0, [r7, #0]
 80010d0:	f003 fa98 	bl	8004604 <USB_DevInit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e014      	b.n	8001110 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f001 f892 	bl	8002228 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f004 fb18 	bl	800573e <USB_DevDisconnect>

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001118 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_PCD_Start+0x1c>
 8001130:	2302      	movs	r3, #2
 8001132:	e020      	b.n	8001176 <HAL_PCD_Start+0x5e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	2b01      	cmp	r3, #1
 8001142:	d109      	bne.n	8001158 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001148:	2b01      	cmp	r3, #1
 800114a:	d005      	beq.n	8001158 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001150:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fa05 	bl	800456c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fac8 	bl	80056fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800117e:	b590      	push	{r4, r7, lr}
 8001180:	b08d      	sub	sp, #52	; 0x34
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fb86 	bl	80058a6 <USB_GetMode>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 83ca 	bne.w	8001936 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 faea 	bl	8005780 <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 83c0 	beq.w	8001934 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fae1 	bl	8005780 <USB_ReadInterrupts>
 80011be:	4603      	mov	r3, r0
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d107      	bne.n	80011d8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f002 0202 	and.w	r2, r2, #2
 80011d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 facf 	bl	8005780 <USB_ReadInterrupts>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	d161      	bne.n	80012b0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699a      	ldr	r2, [r3, #24]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0210 	bic.w	r2, r2, #16
 80011fa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f003 020f 	and.w	r2, r3, #15
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	3304      	adds	r3, #4
 800121a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	0c5b      	lsrs	r3, r3, #17
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	2b02      	cmp	r3, #2
 8001226:	d124      	bne.n	8001272 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d035      	beq.n	80012a0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800123e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	6a38      	ldr	r0, [r7, #32]
 8001248:	f004 f906 	bl	8005458 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001258:	441a      	add	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126a:	441a      	add	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	619a      	str	r2, [r3, #24]
 8001270:	e016      	b.n	80012a0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	0c5b      	lsrs	r3, r3, #17
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	2b06      	cmp	r3, #6
 800127c:	d110      	bne.n	80012a0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001284:	2208      	movs	r2, #8
 8001286:	4619      	mov	r1, r3
 8001288:	6a38      	ldr	r0, [r7, #32]
 800128a:	f004 f8e5 	bl	8005458 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129a:	441a      	add	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0210 	orr.w	r2, r2, #16
 80012ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fa63 	bl	8005780 <USB_ReadInterrupts>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012c4:	d16e      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 fa69 	bl	80057a6 <USB_ReadDevAllOutEpInterrupt>
 80012d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012d6:	e062      	b.n	800139e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d057      	beq.n	8001392 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fa8e 	bl	800580e <USB_ReadDevOutEPInterrupt>
 80012f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00c      	beq.n	8001318 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130a:	461a      	mov	r2, r3
 800130c:	2301      	movs	r3, #1
 800130e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fdde 	bl	8001ed4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00c      	beq.n	800133c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	015a      	lsls	r2, r3, #5
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800132e:	461a      	mov	r2, r3
 8001330:	2308      	movs	r3, #8
 8001332:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fed8 	bl	80020ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d008      	beq.n	8001358 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	015a      	lsls	r2, r3, #5
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4413      	add	r3, r2
 800134e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001352:	461a      	mov	r2, r3
 8001354:	2310      	movs	r3, #16
 8001356:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136e:	461a      	mov	r2, r3
 8001370:	2320      	movs	r3, #32
 8001372:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138a:	461a      	mov	r2, r3
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d199      	bne.n	80012d8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 f9e9 	bl	8005780 <USB_ReadInterrupts>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013b8:	f040 80c0 	bne.w	800153c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 fa0a 	bl	80057da <USB_ReadDevAllInEpInterrupt>
 80013c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013cc:	e0b2      	b.n	8001534 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a7 	beq.w	8001528 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fa30 	bl	800584a <USB_ReadDevInEPInterrupt>
 80013ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d057      	beq.n	80014a6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	2201      	movs	r2, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	69f9      	ldr	r1, [r7, #28]
 8001412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001416:	4013      	ands	r3, r2
 8001418:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	015a      	lsls	r2, r3, #5
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4413      	add	r3, r2
 8001422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001426:	461a      	mov	r2, r3
 8001428:	2301      	movs	r3, #1
 800142a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d132      	bne.n	800149a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	3348      	adds	r3, #72	; 0x48
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4403      	add	r3, r0
 8001454:	3344      	adds	r3, #68	; 0x44
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4419      	add	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4403      	add	r3, r0
 8001468:	3348      	adds	r3, #72	; 0x48
 800146a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	2b00      	cmp	r3, #0
 8001470:	d113      	bne.n	800149a <HAL_PCD_IRQHandler+0x31c>
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3350      	adds	r3, #80	; 0x50
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d108      	bne.n	800149a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001492:	461a      	mov	r2, r3
 8001494:	2101      	movs	r1, #1
 8001496:	f004 fa39 	bl	800590c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f006 fa14 	bl	80078ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014bc:	461a      	mov	r2, r3
 80014be:	2308      	movs	r3, #8
 80014c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d8:	461a      	mov	r2, r3
 80014da:	2310      	movs	r3, #16
 80014dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f4:	461a      	mov	r2, r3
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4413      	add	r3, r2
 800150c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001510:	461a      	mov	r2, r3
 8001512:	2302      	movs	r3, #2
 8001514:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fc48 	bl	8001db8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	3301      	adds	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	2b00      	cmp	r3, #0
 8001538:	f47f af49 	bne.w	80013ce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f004 f91d 	bl	8005780 <USB_ReadInterrupts>
 8001546:	4603      	mov	r3, r0
 8001548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800154c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001550:	d122      	bne.n	8001598 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001578:	2100      	movs	r1, #0
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fe78 	bl	8002270 <HAL_PCDEx_LPM_Callback>
 8001580:	e002      	b.n	8001588 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 fa1a 	bl	80079bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f8ef 	bl	8005780 <USB_ReadInterrupts>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ac:	d112      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d102      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f006 f9d6 	bl	8007970 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 f8d1 	bl	8005780 <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015e8:	d121      	bne.n	800162e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80015f8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	f003 020f 	and.w	r2, r3, #15
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800161e:	2101      	movs	r1, #1
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fe25 	bl	8002270 <HAL_PCDEx_LPM_Callback>
 8001626:	e002      	b.n	800162e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f006 f9a1 	bl	8007970 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f004 f8a4 	bl	8005780 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001642:	f040 80c7 	bne.w	80017d4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2110      	movs	r1, #16
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f92d 	bl	80048c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166a:	e056      	b.n	800171a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800167e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001690:	0151      	lsls	r1, r2, #5
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	440a      	add	r2, r1
 8001696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800169a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800169e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b0:	0151      	lsls	r1, r2, #5
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	440a      	add	r2, r1
 80016b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c2:	015a      	lsls	r2, r3, #5
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016cc:	461a      	mov	r2, r3
 80016ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e4:	0151      	lsls	r1, r2, #5
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	440a      	add	r2, r1
 80016ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001704:	0151      	lsls	r1, r2, #5
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	440a      	add	r2, r1
 800170a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800170e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001712:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001716:	3301      	adds	r3, #1
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001720:	429a      	cmp	r2, r3
 8001722:	d3a3      	bcc.n	800166c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001732:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001736:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	2b00      	cmp	r3, #0
 800173e:	d016      	beq.n	800176e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001750:	f043 030b 	orr.w	r3, r3, #11
 8001754:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001766:	f043 030b 	orr.w	r3, r3, #11
 800176a:	6453      	str	r3, [r2, #68]	; 0x44
 800176c:	e015      	b.n	800179a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	4619      	mov	r1, r3
 800177e:	f242 032b 	movw	r3, #8235	; 0x202b
 8001782:	4313      	orrs	r3, r2
 8001784:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001794:	f043 030b 	orr.w	r3, r3, #11
 8001798:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017be:	461a      	mov	r2, r3
 80017c0:	f004 f8a4 	bl	800590c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 ffd1 	bl	8005780 <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e8:	d124      	bne.n	8001834 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 f868 	bl	80058c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 f8c2 	bl	8004982 <USB_GetDevSpeed>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681c      	ldr	r4, [r3, #0]
 800180a:	f001 fcc5 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 800180e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4620      	mov	r0, r4
 800181a:	f002 fe05 	bl	8004428 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f006 f87d 	bl	800791e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001832:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 ffa1 	bl	8005780 <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b08      	cmp	r3, #8
 8001846:	d10a      	bne.n	800185e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f006 f85a 	bl	8007902 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f002 0208 	and.w	r2, r2, #8
 800185c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f003 ff8c 	bl	8005780 <USB_ReadInterrupts>
 8001868:	4603      	mov	r3, r0
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001872:	d10f      	bne.n	8001894 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f006 f8bc 	bl	80079fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 ff71 	bl	8005780 <USB_ReadInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018a8:	d10f      	bne.n	80018ca <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4619      	mov	r1, r3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f006 f88f 	bl	80079d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 ff56 	bl	8005780 <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018de:	d10a      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f006 f89d 	bl	8007a20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 ff40 	bl	8005780 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b04      	cmp	r3, #4
 8001908:	d115      	bne.n	8001936 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f006 f88d 	bl	8007a3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e000      	b.n	8001936 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001934:	bf00      	nop
    }
  }
}
 8001936:	3734      	adds	r7, #52	; 0x34
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_PCD_SetAddress+0x1a>
 8001952:	2302      	movs	r3, #2
 8001954:	e013      	b.n	800197e <HAL_PCD_SetAddress+0x42>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fe9e 	bl	80056b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	4608      	mov	r0, r1
 8001990:	4611      	mov	r1, r2
 8001992:	461a      	mov	r2, r3
 8001994:	4603      	mov	r3, r0
 8001996:	70fb      	strb	r3, [r7, #3]
 8001998:	460b      	mov	r3, r1
 800199a:	803b      	strh	r3, [r7, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da0f      	bge.n	80019cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	f003 020f 	and.w	r2, r3, #15
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	3338      	adds	r3, #56	; 0x38
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	705a      	strb	r2, [r3, #1]
 80019ca:	e00f      	b.n	80019ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 020f 	and.w	r2, r3, #15
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	3304      	adds	r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019f8:	883a      	ldrh	r2, [r7, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	78ba      	ldrb	r2, [r7, #2]
 8001a02:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	785b      	ldrb	r3, [r3, #1]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a16:	78bb      	ldrb	r3, [r7, #2]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d102      	bne.n	8001a22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_PCD_EP_Open+0xaa>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e00e      	b.n	8001a4e <HAL_PCD_EP_Open+0xc8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 ffc4 	bl	80049cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da0f      	bge.n	8001a8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 020f 	and.w	r2, r3, #15
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	3338      	adds	r3, #56	; 0x38
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3304      	adds	r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	705a      	strb	r2, [r3, #1]
 8001a88:	e00f      	b.n	8001aaa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 020f 	and.w	r2, r3, #15
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_PCD_EP_Close+0x6e>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e00e      	b.n	8001ae2 <HAL_PCD_EP_Close+0x8c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 f802 	bl	8004adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	460b      	mov	r3, r1
 8001af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	f003 020f 	and.w	r2, r3, #15
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6979      	ldr	r1, [r7, #20]
 8001b5e:	f003 fae5 	bl	800512c <USB_EP0StartXfer>
 8001b62:	e008      	b.n	8001b76 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	6979      	ldr	r1, [r7, #20]
 8001b72:	f003 f88f 	bl	8004c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	f003 020f 	and.w	r2, r3, #15
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	3338      	adds	r3, #56	; 0x38
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2201      	movs	r2, #1
 8001bee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6979      	ldr	r1, [r7, #20]
 8001c22:	f003 fa83 	bl	800512c <USB_EP0StartXfer>
 8001c26:	e008      	b.n	8001c3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	6979      	ldr	r1, [r7, #20]
 8001c36:	f003 f82d 	bl	8004c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 020f 	and.w	r2, r3, #15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d901      	bls.n	8001c62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e050      	b.n	8001d04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da0f      	bge.n	8001c8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 020f 	and.w	r2, r3, #15
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3338      	adds	r3, #56	; 0x38
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	705a      	strb	r2, [r3, #1]
 8001c88:	e00d      	b.n	8001ca6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_PCD_EP_SetStall+0x82>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e01e      	b.n	8001d04 <HAL_PCD_EP_SetStall+0xc0>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fc17 	bl	8005508 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	b2d9      	uxtb	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f003 fe09 	bl	800590c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d901      	bls.n	8001d2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e042      	b.n	8001db0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da0f      	bge.n	8001d52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3338      	adds	r3, #56	; 0x38
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	705a      	strb	r2, [r3, #1]
 8001d50:	e00f      	b.n	8001d72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 020f 	and.w	r2, r3, #15
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_PCD_EP_ClrStall+0x86>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e00e      	b.n	8001db0 <HAL_PCD_EP_ClrStall+0xa4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fc1f 	bl	80055e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	3338      	adds	r3, #56	; 0x38
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d901      	bls.n	8001df0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e06c      	b.n	8001eca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d902      	bls.n	8001e0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3303      	adds	r3, #3
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e14:	e02b      	b.n	8001e6e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d902      	bls.n	8001e32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3303      	adds	r3, #3
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f003 fac3 	bl	80053dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	441a      	add	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	441a      	add	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d809      	bhi.n	8001e98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	699a      	ldr	r2, [r3, #24]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d203      	bcs.n	8001e98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1be      	bne.n	8001e16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d811      	bhi.n	8001ec8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	2201      	movs	r2, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	6939      	ldr	r1, [r7, #16]
 8001ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	333c      	adds	r3, #60	; 0x3c
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	f040 80a0 	bne.w	800204c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4a72      	ldr	r2, [pc, #456]	; (80020e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	f240 80dd 	bls.w	80020da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80d7 	beq.w	80020da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3e:	6093      	str	r3, [r2, #8]
 8001f40:	e0cb      	b.n	80020da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	6093      	str	r3, [r2, #8]
 8001f5e:	e0bc      	b.n	80020da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80b7 	bne.w	80020da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a5d      	ldr	r2, [pc, #372]	; (80020e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d90f      	bls.n	8001f94 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f90:	6093      	str	r3, [r2, #8]
 8001f92:	e0a2      	b.n	80020da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fa6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	0159      	lsls	r1, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	440b      	add	r3, r1
 8001fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001fba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4403      	add	r3, r0
 8001fca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4403      	add	r3, r0
 8001ff2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4419      	add	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4403      	add	r3, r0
 8002008:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800200c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d114      	bne.n	800203e <PCD_EP_OutXfrComplete_int+0x16a>
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002036:	461a      	mov	r2, r3
 8002038:	2101      	movs	r1, #1
 800203a:	f003 fc67 	bl	800590c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f005 fc27 	bl	8007898 <HAL_PCD_DataOutStageCallback>
 800204a:	e046      	b.n	80020da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d124      	bne.n	800209e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206a:	461a      	mov	r2, r3
 800206c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002070:	6093      	str	r3, [r2, #8]
 8002072:	e032      	b.n	80020da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208a:	461a      	mov	r2, r3
 800208c:	2320      	movs	r3, #32
 800208e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	4619      	mov	r1, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f005 fbfe 	bl	8007898 <HAL_PCD_DataOutStageCallback>
 800209c:	e01d      	b.n	80020da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d114      	bne.n	80020ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d108      	bne.n	80020ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020c6:	461a      	mov	r2, r3
 80020c8:	2100      	movs	r1, #0
 80020ca:	f003 fc1f 	bl	800590c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f005 fbdf 	bl	8007898 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	4f54300a 	.word	0x4f54300a
 80020e8:	4f54310a 	.word	0x4f54310a

080020ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	333c      	adds	r3, #60	; 0x3c
 8002104:	3304      	adds	r3, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a15      	ldr	r2, [pc, #84]	; (8002174 <PCD_EP_OutSetupPacket_int+0x88>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d90e      	bls.n	8002140 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002138:	461a      	mov	r2, r3
 800213a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f005 fb97 	bl	8007874 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <PCD_EP_OutSetupPacket_int+0x88>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d90c      	bls.n	8002168 <PCD_EP_OutSetupPacket_int+0x7c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d108      	bne.n	8002168 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002160:	461a      	mov	r2, r3
 8002162:	2101      	movs	r1, #1
 8002164:	f003 fbd2 	bl	800590c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	4f54300a 	.word	0x4f54300a

08002178 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
 8002184:	4613      	mov	r3, r2
 8002186:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d107      	bne.n	80021a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002196:	883b      	ldrh	r3, [r7, #0]
 8002198:	0419      	lsls	r1, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
 80021a4:	e028      	b.n	80021f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	4413      	add	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e00d      	b.n	80021d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	3340      	adds	r3, #64	; 0x40
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	3301      	adds	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	3b01      	subs	r3, #1
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3ec      	bcc.n	80021ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021e0:	883b      	ldrh	r3, [r7, #0]
 80021e2:	0418      	lsls	r0, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	4302      	orrs	r2, r0
 80021f0:	3340      	adds	r3, #64	; 0x40
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_PCDEx_ActivateLPM+0x44>)
 8002258:	4313      	orrs	r3, r2
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	10000003 	.word	0x10000003

08002270 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00a      	beq.n	80022b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e01f      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e01d      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	490f      	ldr	r1, [pc, #60]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022c2:	f7fe fb03 	bl	80008cc <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022c8:	e009      	b.n	80022de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ca:	f7fe faff 	bl	80008cc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d8:	d901      	bls.n	80022de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ea:	d1ee      	bne.n	80022ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	58024800 	.word	0x58024800

080022fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	58024800 	.word	0x58024800

0800231c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3fd      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8087 	beq.w	800244a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233c:	4b99      	ldr	r3, [pc, #612]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002346:	4b97      	ldr	r3, [pc, #604]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	2b10      	cmp	r3, #16
 8002350:	d007      	beq.n	8002362 <HAL_RCC_OscConfig+0x46>
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	2b18      	cmp	r3, #24
 8002356:	d110      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002362:	4b90      	ldr	r3, [pc, #576]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06c      	beq.n	8002448 <HAL_RCC_OscConfig+0x12c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d168      	bne.n	8002448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e3d7      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x76>
 8002384:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a86      	ldr	r2, [pc, #536]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e02e      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x98>
 800239a:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a81      	ldr	r2, [pc, #516]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7e      	ldr	r2, [pc, #504]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0xbc>
 80023be:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a78      	ldr	r2, [pc, #480]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023d8:	4b72      	ldr	r3, [pc, #456]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a71      	ldr	r2, [pc, #452]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fa68 	bl	80008cc <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe fa64 	bl	80008cc <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e38b      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002412:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xe4>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fa54 	bl	80008cc <HAL_GetTick>
 8002424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fa50 	bl	80008cc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e377      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x10c>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80ae 	beq.w	80025b4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002460:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002462:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_RCC_OscConfig+0x162>
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2b18      	cmp	r3, #24
 8002472:	d13a      	bne.n	80024ea <HAL_RCC_OscConfig+0x1ce>
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d135      	bne.n	80024ea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x17a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e349      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	f7fe fa49 	bl	800092c <HAL_GetREVID>
 800249a:	4603      	mov	r3, r0
 800249c:	f241 0203 	movw	r2, #4099	; 0x1003
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d817      	bhi.n	80024d4 <HAL_RCC_OscConfig+0x1b8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d108      	bne.n	80024be <HAL_RCC_OscConfig+0x1a2>
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024b4:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	e07a      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	031b      	lsls	r3, r3, #12
 80024cc:	4935      	ldr	r1, [pc, #212]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d2:	e06f      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	4930      	ldr	r1, [pc, #192]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e8:	e064      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d045      	beq.n	800257e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0219 	bic.w	r2, r3, #25
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe f9e2 	bl	80008cc <HAL_GetTick>
 8002508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250c:	f7fe f9de 	bl	80008cc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e305      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	f7fe f9ff 	bl	800092c <HAL_GetREVID>
 800252e:	4603      	mov	r3, r0
 8002530:	f241 0203 	movw	r2, #4099	; 0x1003
 8002534:	4293      	cmp	r3, r2
 8002536:	d817      	bhi.n	8002568 <HAL_RCC_OscConfig+0x24c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d108      	bne.n	8002552 <HAL_RCC_OscConfig+0x236>
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254e:	6053      	str	r3, [r2, #4]
 8002550:	e030      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	031b      	lsls	r3, r3, #12
 8002560:	4910      	ldr	r1, [pc, #64]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
 8002566:	e025      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	490b      	ldr	r1, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
 800257c:	e01a      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe f99f 	bl	80008cc <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe f99b 	bl	80008cc <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d903      	bls.n	80025a8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e2c2      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
 80025a4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a8:	4b94      	ldr	r3, [pc, #592]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a9 	beq.w	8002714 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b8e      	ldr	r3, [pc, #568]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025cc:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d007      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2cc>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b18      	cmp	r3, #24
 80025dc:	d13a      	bne.n	8002654 <HAL_RCC_OscConfig+0x338>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d135      	bne.n	8002654 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e8:	4b84      	ldr	r3, [pc, #528]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_OscConfig+0x2e4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e294      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002600:	f7fe f994 	bl	800092c <HAL_GetREVID>
 8002604:	4603      	mov	r3, r0
 8002606:	f241 0203 	movw	r2, #4099	; 0x1003
 800260a:	4293      	cmp	r3, r2
 800260c:	d817      	bhi.n	800263e <HAL_RCC_OscConfig+0x322>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2b20      	cmp	r3, #32
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x30c>
 8002616:	4b79      	ldr	r3, [pc, #484]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800261e:	4a77      	ldr	r2, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002624:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002626:	e075      	b.n	8002714 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002628:	4b74      	ldr	r3, [pc, #464]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	069b      	lsls	r3, r3, #26
 8002636:	4971      	ldr	r1, [pc, #452]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800263c:	e06a      	b.n	8002714 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800263e:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	061b      	lsls	r3, r3, #24
 800264c:	496b      	ldr	r1, [pc, #428]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002652:	e05f      	b.n	8002714 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d042      	beq.n	80026e2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800265c:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a66      	ldr	r2, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe f930 	bl	80008cc <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002670:	f7fe f92c 	bl	80008cc <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e253      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002682:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268e:	f7fe f94d 	bl	800092c <HAL_GetREVID>
 8002692:	4603      	mov	r3, r0
 8002694:	f241 0203 	movw	r2, #4099	; 0x1003
 8002698:	4293      	cmp	r3, r2
 800269a:	d817      	bhi.n	80026cc <HAL_RCC_OscConfig+0x3b0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d108      	bne.n	80026b6 <HAL_RCC_OscConfig+0x39a>
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026ac:	4a53      	ldr	r2, [pc, #332]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026b2:	6053      	str	r3, [r2, #4]
 80026b4:	e02e      	b.n	8002714 <HAL_RCC_OscConfig+0x3f8>
 80026b6:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	069b      	lsls	r3, r3, #26
 80026c4:	494d      	ldr	r1, [pc, #308]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e023      	b.n	8002714 <HAL_RCC_OscConfig+0x3f8>
 80026cc:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	4948      	ldr	r1, [pc, #288]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
 80026e0:	e018      	b.n	8002714 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026e2:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a45      	ldr	r2, [pc, #276]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80026e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe f8ed 	bl	80008cc <HAL_GetTick>
 80026f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026f6:	f7fe f8e9 	bl	80008cc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e210      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002708:	4b3c      	ldr	r3, [pc, #240]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d036      	beq.n	800278e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d019      	beq.n	800275c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002728:	4b34      	ldr	r3, [pc, #208]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	4a33      	ldr	r2, [pc, #204]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe f8ca 	bl	80008cc <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe f8c6 	bl	80008cc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1ed      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x420>
 800275a:	e018      	b.n	800278e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe f8b0 	bl	80008cc <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe f8ac 	bl	80008cc <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1d3      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d038      	beq.n	800280c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d019      	beq.n	80027d6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a15      	ldr	r2, [pc, #84]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80027a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ae:	f7fe f88d 	bl	80008cc <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027b6:	f7fe f889 	bl	80008cc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e1b0      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x49a>
 80027d4:	e01a      	b.n	800280c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_RCC_OscConfig+0x4e0>)
 80027dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027e2:	f7fe f873 	bl	80008cc <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027ea:	f7fe f86f 	bl	80008cc <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d903      	bls.n	8002800 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e196      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
 80027fc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002800:	4b99      	ldr	r3, [pc, #612]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8081 	beq.w	800291c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800281a:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <HAL_RCC_OscConfig+0x750>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a93      	ldr	r2, [pc, #588]	; (8002a6c <HAL_RCC_OscConfig+0x750>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002826:	f7fe f851 	bl	80008cc <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800282e:	f7fe f84d 	bl	80008cc <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b64      	cmp	r3, #100	; 0x64
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e174      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002840:	4b8a      	ldr	r3, [pc, #552]	; (8002a6c <HAL_RCC_OscConfig+0x750>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x546>
 8002854:	4b84      	ldr	r3, [pc, #528]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a83      	ldr	r2, [pc, #524]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6713      	str	r3, [r2, #112]	; 0x70
 8002860:	e02d      	b.n	80028be <HAL_RCC_OscConfig+0x5a2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x568>
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6713      	str	r3, [r2, #112]	; 0x70
 8002876:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a7b      	ldr	r2, [pc, #492]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
 8002882:	e01c      	b.n	80028be <HAL_RCC_OscConfig+0x5a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d10c      	bne.n	80028a6 <HAL_RCC_OscConfig+0x58a>
 800288c:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a72      	ldr	r2, [pc, #456]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	e00b      	b.n	80028be <HAL_RCC_OscConfig+0x5a2>
 80028a6:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a6f      	ldr	r2, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	4a6c      	ldr	r2, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d015      	beq.n	80028f2 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7fe f801 	bl	80008cc <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7fd fffd 	bl	80008cc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e122      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028e4:	4b60      	ldr	r3, [pc, #384]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ee      	beq.n	80028ce <HAL_RCC_OscConfig+0x5b2>
 80028f0:	e014      	b.n	800291c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fd ffeb 	bl	80008cc <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fd ffe7 	bl	80008cc <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	; 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e10c      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ee      	bne.n	80028fa <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8101 	beq.w	8002b28 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800292e:	2b18      	cmp	r3, #24
 8002930:	f000 80bc 	beq.w	8002aac <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2b02      	cmp	r3, #2
 800293a:	f040 809d 	bne.w	8002a78 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fd ffbf 	bl	80008cc <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002952:	f7fd ffbb 	bl	80008cc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0e2      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_RCC_OscConfig+0x754>)
 8002976:	4013      	ands	r3, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	430a      	orrs	r2, r1
 8002984:	4938      	ldr	r1, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002986:	4313      	orrs	r3, r2
 8002988:	628b      	str	r3, [r1, #40]	; 0x28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	3b01      	subs	r3, #1
 8002990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	3b01      	subs	r3, #1
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	b29b      	uxth	r3, r3
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	3b01      	subs	r3, #1
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029ba:	492b      	ldr	r1, [pc, #172]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d0:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_RCC_OscConfig+0x758>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029d8:	00d2      	lsls	r2, r2, #3
 80029da:	4923      	ldr	r1, [pc, #140]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	f023 020c 	bic.w	r2, r3, #12
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	491e      	ldr	r1, [pc, #120]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f023 0202 	bic.w	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	491a      	ldr	r1, [pc, #104]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fd ff44 	bl	80008cc <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fd ff40 	bl	80008cc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e067      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_OscConfig+0x74c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x72c>
 8002a66:	e05f      	b.n	8002b28 <HAL_RCC_OscConfig+0x80c>
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	58024800 	.word	0x58024800
 8002a70:	fffffc0c 	.word	0xfffffc0c
 8002a74:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_RCC_OscConfig+0x818>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2d      	ldr	r2, [pc, #180]	; (8002b34 <HAL_RCC_OscConfig+0x818>)
 8002a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fd ff22 	bl	80008cc <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fd ff1e 	bl	80008cc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e045      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9e:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_OscConfig+0x818>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x770>
 8002aaa:	e03d      	b.n	8002b28 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_RCC_OscConfig+0x818>)
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_OscConfig+0x818>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d031      	beq.n	8002b24 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d12a      	bne.n	8002b24 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d122      	bne.n	8002b24 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11a      	bne.n	8002b24 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0a5b      	lsrs	r3, r3, #9
 8002af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d111      	bne.n	8002b24 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	0e1b      	lsrs	r3, r3, #24
 8002b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400

08002b38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e19c      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b8a      	ldr	r3, [pc, #552]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d910      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b87      	ldr	r3, [pc, #540]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 020f 	bic.w	r2, r3, #15
 8002b62:	4985      	ldr	r1, [pc, #532]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b83      	ldr	r3, [pc, #524]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e184      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d908      	bls.n	8002baa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b98:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4975      	ldr	r1, [pc, #468]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	496a      	ldr	r1, [pc, #424]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	4b64      	ldr	r3, [pc, #400]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d908      	bls.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bf4:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	495e      	ldr	r1, [pc, #376]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d010      	beq.n	8002c34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d908      	bls.n	8002c34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4953      	ldr	r1, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d908      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f023 020f 	bic.w	r2, r3, #15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4947      	ldr	r1, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d055      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4940      	ldr	r1, [pc, #256]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c88:	4b3c      	ldr	r3, [pc, #240]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d121      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0f6      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d115      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0ea      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0de      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d6      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f023 0207 	bic.w	r2, r3, #7
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4925      	ldr	r1, [pc, #148]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fd fdef 	bl	80008cc <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7fd fdeb 	bl	80008cc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0be      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d08:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d1eb      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d208      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f023 020f 	bic.w	r2, r3, #15
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	490e      	ldr	r1, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d214      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 020f 	bic.w	r2, r3, #15
 8002d5e:	4906      	ldr	r1, [pc, #24]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e086      	b.n	8002e86 <HAL_RCC_ClockConfig+0x34e>
 8002d78:	52002000 	.word	0x52002000
 8002d7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d208      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	4939      	ldr	r1, [pc, #228]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d010      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d208      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dca:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	492e      	ldr	r1, [pc, #184]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d010      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d208      	bcs.n	8002e0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	4922      	ldr	r1, [pc, #136]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d010      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d208      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4917      	ldr	r1, [pc, #92]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e38:	f000 f834 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	4912      	ldr	r1, [pc, #72]	; (8002e94 <HAL_RCC_ClockConfig+0x35c>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_RCC_ClockConfig+0x358>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_RCC_ClockConfig+0x35c>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <HAL_RCC_ClockConfig+0x360>)
 8002e6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <HAL_RCC_ClockConfig+0x364>)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x368>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fcdc 	bl	8000838 <HAL_InitTick>
 8002e80:	4603      	mov	r3, r0
 8002e82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	58024400 	.word	0x58024400
 8002e94:	08007ec0 	.word	0x08007ec0
 8002e98:	24000004 	.word	0x24000004
 8002e9c:	24000000 	.word	0x24000000
 8002ea0:	24000008 	.word	0x24000008

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eaa:	4bb3      	ldr	r3, [pc, #716]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eb2:	2b18      	cmp	r3, #24
 8002eb4:	f200 8155 	bhi.w	8003162 <HAL_RCC_GetSysClockFreq+0x2be>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002f25 	.word	0x08002f25
 8002ec4:	08003163 	.word	0x08003163
 8002ec8:	08003163 	.word	0x08003163
 8002ecc:	08003163 	.word	0x08003163
 8002ed0:	08003163 	.word	0x08003163
 8002ed4:	08003163 	.word	0x08003163
 8002ed8:	08003163 	.word	0x08003163
 8002edc:	08003163 	.word	0x08003163
 8002ee0:	08002f4b 	.word	0x08002f4b
 8002ee4:	08003163 	.word	0x08003163
 8002ee8:	08003163 	.word	0x08003163
 8002eec:	08003163 	.word	0x08003163
 8002ef0:	08003163 	.word	0x08003163
 8002ef4:	08003163 	.word	0x08003163
 8002ef8:	08003163 	.word	0x08003163
 8002efc:	08003163 	.word	0x08003163
 8002f00:	08002f51 	.word	0x08002f51
 8002f04:	08003163 	.word	0x08003163
 8002f08:	08003163 	.word	0x08003163
 8002f0c:	08003163 	.word	0x08003163
 8002f10:	08003163 	.word	0x08003163
 8002f14:	08003163 	.word	0x08003163
 8002f18:	08003163 	.word	0x08003163
 8002f1c:	08003163 	.word	0x08003163
 8002f20:	08002f57 	.word	0x08002f57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f24:	4b94      	ldr	r3, [pc, #592]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f30:	4b91      	ldr	r3, [pc, #580]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	4a90      	ldr	r2, [pc, #576]	; (800317c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002f42:	e111      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f44:	4b8d      	ldr	r3, [pc, #564]	; (800317c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f46:	61bb      	str	r3, [r7, #24]
    break;
 8002f48:	e10e      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f4c:	61bb      	str	r3, [r7, #24]
    break;
 8002f4e:	e10b      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002f50:	4b8c      	ldr	r3, [pc, #560]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f52:	61bb      	str	r3, [r7, #24]
    break;
 8002f54:	e108      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002f60:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f6c:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002f76:	4b80      	ldr	r3, [pc, #512]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80e1 	beq.w	800315c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	f000 8083 	beq.w	80030a8 <HAL_RCC_GetSysClockFreq+0x204>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	f200 80a1 	bhi.w	80030ec <HAL_RCC_GetSysClockFreq+0x248>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x114>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d056      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fb6:	e099      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d02d      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	08db      	lsrs	r3, r3, #3
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	4a6b      	ldr	r2, [pc, #428]	; (800317c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fee:	4b62      	ldr	r3, [pc, #392]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003002:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800301e:	e087      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800318c <HAL_RCC_GetSysClockFreq+0x2e8>
 800302e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003032:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003042:	ed97 6a02 	vldr	s12, [r7, #8]
 8003046:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800304a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003062:	e065      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003190 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003076:	4b40      	ldr	r3, [pc, #256]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003086:	ed97 6a02 	vldr	s12, [r7, #8]
 800308a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800308e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030a6:	e043      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003194 <HAL_RCC_GetSysClockFreq+0x2f0>
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003188 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030ea:	e021      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003190 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003112:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800312e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	0a5b      	lsrs	r3, r3, #9
 8003136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313a:	3301      	adds	r3, #1
 800313c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003148:	edd7 6a07 	vldr	s13, [r7, #28]
 800314c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003154:	ee17 3a90 	vmov	r3, s15
 8003158:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800315a:	e005      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
    break;
 8003160:	e002      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003164:	61bb      	str	r3, [r7, #24]
    break;
 8003166:	bf00      	nop
  }

  return sysclockfreq;
 8003168:	69bb      	ldr	r3, [r7, #24]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	58024400 	.word	0x58024400
 800317c:	03d09000 	.word	0x03d09000
 8003180:	003d0900 	.word	0x003d0900
 8003184:	007a1200 	.word	0x007a1200
 8003188:	46000000 	.word	0x46000000
 800318c:	4c742400 	.word	0x4c742400
 8003190:	4a742400 	.word	0x4a742400
 8003194:	4af42400 	.word	0x4af42400

08003198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800319e:	f7ff fe81 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	490f      	ldr	r1, [pc, #60]	; (80031ec <HAL_RCC_GetHCLKFreq+0x54>)
 80031b0:	5ccb      	ldrb	r3, [r1, r3]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_GetHCLKFreq+0x54>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	fa22 f303 	lsr.w	r3, r2, r3
 80031d2:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	58024400 	.word	0x58024400
 80031ec:	08007ec0 	.word	0x08007ec0
 80031f0:	24000004 	.word	0x24000004
 80031f4:	24000000 	.word	0x24000000

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003204:	2300      	movs	r3, #0
 8003206:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d03f      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800321c:	d02a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800321e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003222:	d824      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003224:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003228:	d018      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800322a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322e:	d81e      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003238:	d007      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800323a:	e018      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4ba3      	ldr	r3, [pc, #652]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	4aa2      	ldr	r2, [pc, #648]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003248:	e015      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 ff17 	bl	8004084 <RCCEx_PLL2_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800325a:	e00c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3324      	adds	r3, #36	; 0x24
 8003260:	2102      	movs	r1, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f000 ffc0 	bl	80041e8 <RCCEx_PLL3_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
      break;
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800327c:	4b93      	ldr	r3, [pc, #588]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003288:	4990      	ldr	r1, [pc, #576]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	650b      	str	r3, [r1, #80]	; 0x50
 800328e:	e001      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03d      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d826      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032c5 	.word	0x080032c5
 80032b4:	080032d3 	.word	0x080032d3
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032fd 	.word	0x080032fd
 80032c0:	080032fd 	.word	0x080032fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c4:	4b81      	ldr	r3, [pc, #516]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4a80      	ldr	r2, [pc, #512]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d0:	e015      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fed3 	bl	8004084 <RCCEx_PLL2_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032e2:	e00c      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff7c 	bl	80041e8 <RCCEx_PLL3_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032f4:	e003      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
      break;
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003304:	4b71      	ldr	r3, [pc, #452]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003308:	f023 0207 	bic.w	r2, r3, #7
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	496e      	ldr	r1, [pc, #440]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	650b      	str	r3, [r1, #80]	; 0x50
 8003316:	e001      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003324:	2b00      	cmp	r3, #0
 8003326:	d042      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003330:	d02b      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d825      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003338:	2bc0      	cmp	r3, #192	; 0xc0
 800333a:	d028      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800333c:	2bc0      	cmp	r3, #192	; 0xc0
 800333e:	d821      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003340:	2b80      	cmp	r3, #128	; 0x80
 8003342:	d016      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d81d      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d007      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003350:	e018      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003352:	4b5e      	ldr	r3, [pc, #376]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a5d      	ldr	r2, [pc, #372]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800335e:	e017      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fe8c 	bl	8004084 <RCCEx_PLL2_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003370:	e00e      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3324      	adds	r3, #36	; 0x24
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f000 ff35 	bl	80041e8 <RCCEx_PLL3_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003382:	e005      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
      break;
 8003388:	e002      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800338e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003396:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	494a      	ldr	r1, [pc, #296]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	650b      	str	r3, [r1, #80]	; 0x50
 80033a8:	e001      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d049      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033c4:	d030      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80033c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ca:	d82a      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033d0:	d02c      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80033d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033d6:	d824      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033dc:	d018      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80033de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e2:	d81e      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ec:	d007      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033ee:	e018      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	4a35      	ldr	r2, [pc, #212]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033fc:	e017      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fe3d 	bl	8004084 <RCCEx_PLL2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800340e:	e00e      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3324      	adds	r3, #36	; 0x24
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fee6 	bl	80041e8 <RCCEx_PLL3_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003420:	e005      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
      break;
 8003426:	e002      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800342c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003442:	4922      	ldr	r1, [pc, #136]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	658b      	str	r3, [r1, #88]	; 0x58
 8003448:	e001      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003456:	2b00      	cmp	r3, #0
 8003458:	d04b      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003464:	d030      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346a:	d82a      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800346c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003470:	d02e      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003472:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003476:	d824      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800347c:	d018      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800347e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003482:	d81e      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d007      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800348e:	e018      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a0d      	ldr	r2, [pc, #52]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800349c:	e019      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fded 	bl	8004084 <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80034ae:	e010      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3324      	adds	r3, #36	; 0x24
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fe96 	bl	80041e8 <RCCEx_PLL3_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034c0:	e007      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
      break;
 80034c6:	e004      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80034c8:	bf00      	nop
 80034ca:	e002      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80034cc:	58024400 	.word	0x58024400
      break;
 80034d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034d8:	4b99      	ldr	r3, [pc, #612]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034e6:	4996      	ldr	r1, [pc, #600]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	658b      	str	r3, [r1, #88]	; 0x58
 80034ec:	e001      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d032      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003502:	2b30      	cmp	r3, #48	; 0x30
 8003504:	d01c      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003506:	2b30      	cmp	r3, #48	; 0x30
 8003508:	d817      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800350a:	2b20      	cmp	r3, #32
 800350c:	d00c      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800350e:	2b20      	cmp	r3, #32
 8003510:	d813      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003516:	2b10      	cmp	r3, #16
 8003518:	d10f      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800351a:	4b89      	ldr	r3, [pc, #548]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	4a88      	ldr	r2, [pc, #544]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003526:	e00e      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fda8 	bl	8004084 <RCCEx_PLL2_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003538:	e005      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003540:	bf00      	nop
 8003542:	e000      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800354c:	4b7c      	ldr	r3, [pc, #496]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003558:	4979      	ldr	r1, [pc, #484]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800355a:	4313      	orrs	r3, r2
 800355c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800355e:	e001      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d047      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003578:	d030      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800357a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800357e:	d82a      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003584:	d02c      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003586:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800358a:	d824      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003590:	d018      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003596:	d81e      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d007      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80035a2:	e018      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a4:	4b66      	ldr	r3, [pc, #408]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035b0:	e017      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fd63 	bl	8004084 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035c2:	e00e      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3324      	adds	r3, #36	; 0x24
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fe0c 	bl	80041e8 <RCCEx_PLL3_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035d4:	e005      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
      break;
 80035da:	e002      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035e8:	4b55      	ldr	r3, [pc, #340]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	4952      	ldr	r1, [pc, #328]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	650b      	str	r3, [r1, #80]	; 0x50
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d049      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003614:	d02e      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361a:	d828      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800361c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003620:	d02a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003622:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003626:	d822      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003628:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800362c:	d026      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800362e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003632:	d81c      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003638:	d010      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800363a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800363e:	d816      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d111      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd17 	bl	8004084 <RCCEx_PLL2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800365a:	e012      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fdc0 	bl	80041e8 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800366c:	e009      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
      break;
 8003672:	e006      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003674:	bf00      	nop
 8003676:	e004      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003678:	bf00      	nop
 800367a:	e002      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003694:	492a      	ldr	r1, [pc, #168]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003696:	4313      	orrs	r3, r2
 8003698:	650b      	str	r3, [r1, #80]	; 0x50
 800369a:	e001      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d04d      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b6:	d02e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80036b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036bc:	d828      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c2:	d02a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d822      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036ce:	d026      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80036d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036d4:	d81c      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036da:	d010      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e0:	d816      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01d      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80036e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ea:	d111      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fcc6 	bl	8004084 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036fc:	e012      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3324      	adds	r3, #36	; 0x24
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fd6f 	bl	80041e8 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800370e:	e009      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
      break;
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003716:	bf00      	nop
 8003718:	e004      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10c      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003738:	4901      	ldr	r1, [pc, #4]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800373a:	4313      	orrs	r3, r2
 800373c:	658b      	str	r3, [r1, #88]	; 0x58
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003740:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02f      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800375c:	d00e      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800375e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003762:	d814      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d015      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800376c:	d10f      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376e:	4baf      	ldr	r3, [pc, #700]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4aae      	ldr	r2, [pc, #696]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003778:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800377a:	e00c      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fc7e 	bl	8004084 <RCCEx_PLL2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
      break;
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800379c:	4ba3      	ldr	r3, [pc, #652]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a8:	49a0      	ldr	r1, [pc, #640]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	650b      	str	r3, [r1, #80]	; 0x50
 80037ae:	e001      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d032      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d81b      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	08003807 	.word	0x08003807
 80037d4:	080037e1 	.word	0x080037e1
 80037d8:	080037ef 	.word	0x080037ef
 80037dc:	08003807 	.word	0x08003807
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e0:	4b92      	ldr	r3, [pc, #584]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a91      	ldr	r2, [pc, #580]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037ec:	e00c      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fc45 	bl	8004084 <RCCEx_PLL2_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037fe:	e003      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	75fb      	strb	r3, [r7, #23]
      break;
 8003804:	e000      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800380e:	4b87      	ldr	r3, [pc, #540]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	f023 0203 	bic.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	4984      	ldr	r1, [pc, #528]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800381c:	4313      	orrs	r3, r2
 800381e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003820:	e001      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8086 	beq.w	8003940 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003834:	4b7e      	ldr	r3, [pc, #504]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7d      	ldr	r2, [pc, #500]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800383a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003840:	f7fd f844 	bl	80008cc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003846:	e009      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fd f840 	bl	80008cc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d902      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	75fb      	strb	r3, [r7, #23]
        break;
 800385a:	e005      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800385c:	4b74      	ldr	r3, [pc, #464]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ef      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d166      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800386e:	4b6f      	ldr	r3, [pc, #444]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003878:	4053      	eors	r3, r2
 800387a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387e:	2b00      	cmp	r3, #0
 8003880:	d013      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800388c:	4b67      	ldr	r3, [pc, #412]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a66      	ldr	r2, [pc, #408]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003898:	4b64      	ldr	r3, [pc, #400]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a63      	ldr	r2, [pc, #396]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038a4:	4a61      	ldr	r2, [pc, #388]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b4:	d115      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fd f809 	bl	80008cc <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038bc:	e00b      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd f805 	bl	80008cc <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	75fb      	strb	r3, [r7, #23]
            break;
 80038d4:	e005      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038d6:	4b55      	ldr	r3, [pc, #340]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ed      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d126      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f6:	d10d      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80038f8:	4b4c      	ldr	r3, [pc, #304]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003906:	0919      	lsrs	r1, r3, #4
 8003908:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800390a:	400b      	ands	r3, r1
 800390c:	4947      	ldr	r1, [pc, #284]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800390e:	4313      	orrs	r3, r2
 8003910:	610b      	str	r3, [r1, #16]
 8003912:	e005      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003914:	4b45      	ldr	r3, [pc, #276]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	4a44      	ldr	r2, [pc, #272]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800391a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800391e:	6113      	str	r3, [r2, #16]
 8003920:	4b42      	ldr	r3, [pc, #264]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	493f      	ldr	r1, [pc, #252]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003930:	4313      	orrs	r3, r2
 8003932:	670b      	str	r3, [r1, #112]	; 0x70
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	75bb      	strb	r3, [r7, #22]
 800393a:	e001      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8085 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003952:	2b28      	cmp	r3, #40	; 0x28
 8003954:	d866      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003a39 	.word	0x08003a39
 8003960:	08003a25 	.word	0x08003a25
 8003964:	08003a25 	.word	0x08003a25
 8003968:	08003a25 	.word	0x08003a25
 800396c:	08003a25 	.word	0x08003a25
 8003970:	08003a25 	.word	0x08003a25
 8003974:	08003a25 	.word	0x08003a25
 8003978:	08003a25 	.word	0x08003a25
 800397c:	08003a01 	.word	0x08003a01
 8003980:	08003a25 	.word	0x08003a25
 8003984:	08003a25 	.word	0x08003a25
 8003988:	08003a25 	.word	0x08003a25
 800398c:	08003a25 	.word	0x08003a25
 8003990:	08003a25 	.word	0x08003a25
 8003994:	08003a25 	.word	0x08003a25
 8003998:	08003a25 	.word	0x08003a25
 800399c:	08003a13 	.word	0x08003a13
 80039a0:	08003a25 	.word	0x08003a25
 80039a4:	08003a25 	.word	0x08003a25
 80039a8:	08003a25 	.word	0x08003a25
 80039ac:	08003a25 	.word	0x08003a25
 80039b0:	08003a25 	.word	0x08003a25
 80039b4:	08003a25 	.word	0x08003a25
 80039b8:	08003a25 	.word	0x08003a25
 80039bc:	08003a39 	.word	0x08003a39
 80039c0:	08003a25 	.word	0x08003a25
 80039c4:	08003a25 	.word	0x08003a25
 80039c8:	08003a25 	.word	0x08003a25
 80039cc:	08003a25 	.word	0x08003a25
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	08003a25 	.word	0x08003a25
 80039d8:	08003a25 	.word	0x08003a25
 80039dc:	08003a39 	.word	0x08003a39
 80039e0:	08003a25 	.word	0x08003a25
 80039e4:	08003a25 	.word	0x08003a25
 80039e8:	08003a25 	.word	0x08003a25
 80039ec:	08003a25 	.word	0x08003a25
 80039f0:	08003a25 	.word	0x08003a25
 80039f4:	08003a25 	.word	0x08003a25
 80039f8:	08003a25 	.word	0x08003a25
 80039fc:	08003a39 	.word	0x08003a39
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	2101      	movs	r1, #1
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fb3c 	bl	8004084 <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a10:	e013      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3324      	adds	r3, #36	; 0x24
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fbe5 	bl	80041e8 <RCCEx_PLL3_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a22:	e00a      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
      break;
 8003a28:	e007      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a2a:	bf00      	nop
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	58024800 	.word	0x58024800
 8003a34:	00ffffcf 	.word	0x00ffffcf
      break;
 8003a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a40:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a4c:	4993      	ldr	r1, [pc, #588]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	654b      	str	r3, [r1, #84]	; 0x54
 8003a52:	e001      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d038      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d821      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003ab7 	.word	0x08003ab7
 8003a78:	08003a8d 	.word	0x08003a8d
 8003a7c:	08003a9f 	.word	0x08003a9f
 8003a80:	08003ab7 	.word	0x08003ab7
 8003a84:	08003ab7 	.word	0x08003ab7
 8003a88:	08003ab7 	.word	0x08003ab7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2101      	movs	r1, #1
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 faf6 	bl	8004084 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a9c:	e00c      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3324      	adds	r3, #36	; 0x24
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fb9f 	bl	80041e8 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003aae:	e003      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003abe:	4b77      	ldr	r3, [pc, #476]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f023 0207 	bic.w	r2, r3, #7
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aca:	4974      	ldr	r1, [pc, #464]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	654b      	str	r3, [r1, #84]	; 0x54
 8003ad0:	e001      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d03a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d821      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b37 	.word	0x08003b37
 8003af8:	08003b0d 	.word	0x08003b0d
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2101      	movs	r1, #1
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fab6 	bl	8004084 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b1c:	e00c      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3324      	adds	r3, #36	; 0x24
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fb5f 	bl	80041e8 <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b3e:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f023 0207 	bic.w	r2, r3, #7
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	4953      	ldr	r1, [pc, #332]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	658b      	str	r3, [r1, #88]	; 0x58
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d04b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b6e:	d02e      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b74:	d828      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d02a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d822      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b86:	d026      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b8c:	d81c      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b92:	d010      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b98:	d816      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01d      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba2:	d111      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fa6a 	bl	8004084 <RCCEx_PLL2_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003bb4:	e012      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3324      	adds	r3, #36	; 0x24
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb13 	bl	80041e8 <RCCEx_PLL3_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003bc6:	e009      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
      break;
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	492a      	ldr	r1, [pc, #168]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	654b      	str	r3, [r1, #84]	; 0x54
 8003bf6:	e001      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d04d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c12:	d02e      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003c14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c18:	d828      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1e:	d02a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d822      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c2a:	d026      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c30:	d81c      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c36:	d010      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d816      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01d      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d111      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fa18 	bl	8004084 <RCCEx_PLL2_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c58:	e012      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3324      	adds	r3, #36	; 0x24
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fac1 	bl	80041e8 <RCCEx_PLL3_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c6a:	e009      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c70:	e006      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c72:	bf00      	nop
 8003c74:	e004      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c94:	4901      	ldr	r1, [pc, #4]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	658b      	str	r3, [r1, #88]	; 0x58
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d04b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cba:	d02e      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003cbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cc0:	d828      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc6:	d02a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	d822      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cd2:	d026      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003cd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cd8:	d81c      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cde:	d010      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce4:	d816      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01d      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d111      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9c4 	bl	8004084 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d00:	e012      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3324      	adds	r3, #36	; 0x24
 8003d06:	2102      	movs	r1, #2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fa6d 	bl	80041e8 <RCCEx_PLL3_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d12:	e009      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	75fb      	strb	r3, [r7, #23]
      break;
 8003d18:	e006      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e004      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d2e:	4b9d      	ldr	r3, [pc, #628]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d3c:	4999      	ldr	r1, [pc, #612]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	658b      	str	r3, [r1, #88]	; 0x58
 8003d42:	e001      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d10a      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3324      	adds	r3, #36	; 0x24
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fa3e 	bl	80041e8 <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d76:	4b8b      	ldr	r3, [pc, #556]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d84:	4987      	ldr	r1, [pc, #540]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da0:	d10a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3324      	adds	r3, #36	; 0x24
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fa1d 	bl	80041e8 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003db8:	4b7a      	ldr	r3, [pc, #488]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc6:	4977      	ldr	r1, [pc, #476]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d034      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de2:	d01d      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de8:	d817      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df2:	d009      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003df4:	e011      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f941 	bl	8004084 <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e06:	e00c      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3324      	adds	r3, #36	; 0x24
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f9ea 	bl	80041e8 <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e18:	e003      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e28:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e36:	495b      	ldr	r1, [pc, #364]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003e3c:	e001      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d033      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e58:	d01c      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003e5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e5e:	d816      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e64:	d003      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e6a:	d007      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003e6c:	e00f      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	4a4c      	ldr	r2, [pc, #304]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e7a:	e00c      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3324      	adds	r3, #36	; 0x24
 8003e80:	2101      	movs	r1, #1
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f9b0 	bl	80041e8 <RCCEx_PLL3_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e8c:	e003      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
      break;
 8003e92:	e000      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eaa:	493e      	ldr	r1, [pc, #248]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	654b      	str	r3, [r1, #84]	; 0x54
 8003eb0:	e001      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
 8003eb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d029      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ece:	d007      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003ed0:	e00f      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	4a33      	ldr	r2, [pc, #204]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ede:	e00b      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f8cc 	bl	8004084 <RCCEx_PLL2_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ef0:	e002      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003efe:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	4926      	ldr	r1, [pc, #152]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f10:	e001      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f95d 	bl	80041e8 <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d033      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4c:	d017      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f52:	d811      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f58:	d013      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5e:	d80b      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d010      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f68:	d106      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f76:	e007      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	e004      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9a:	4902      	ldr	r1, [pc, #8]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8003fa0:	e004      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003fa2:	bf00      	nop
 8003fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	492e      	ldr	r1, [pc, #184]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fe4:	4926      	ldr	r1, [pc, #152]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ff6:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004002:	491f      	ldr	r1, [pc, #124]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004004:	4313      	orrs	r3, r2
 8004006:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004014:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800401a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800401e:	6113      	str	r3, [r2, #16]
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800402a:	4915      	ldr	r1, [pc, #84]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800402c:	4313      	orrs	r3, r2
 800402e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	da08      	bge.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004046:	4313      	orrs	r3, r2
 8004048:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	4906      	ldr	r1, [pc, #24]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004066:	4313      	orrs	r3, r2
 8004068:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800406a:	7dbb      	ldrb	r3, [r7, #22]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400

08004084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004092:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b03      	cmp	r3, #3
 800409c:	d101      	bne.n	80040a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e099      	b.n	80041d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80040a2:	4b4f      	ldr	r3, [pc, #316]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a4e      	ldr	r2, [pc, #312]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80040a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ae:	f7fc fc0d 	bl	80008cc <HAL_GetTick>
 80040b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80040b6:	f7fc fc09 	bl	80008cc <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e086      	b.n	80041d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040c8:	4b45      	ldr	r3, [pc, #276]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	031b      	lsls	r3, r3, #12
 80040e2:	493f      	ldr	r1, [pc, #252]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	628b      	str	r3, [r1, #40]	; 0x28
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	3b01      	subs	r3, #1
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004118:	4931      	ldr	r1, [pc, #196]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800411e:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	492d      	ldr	r1, [pc, #180]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f023 0220 	bic.w	r2, r3, #32
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	4928      	ldr	r1, [pc, #160]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004142:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004148:	f023 0310 	bic.w	r3, r3, #16
 800414c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <RCCEx_PLL2_Config+0x160>)
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	69d2      	ldr	r2, [r2, #28]
 800415a:	00d2      	lsls	r2, r2, #3
 800415c:	4920      	ldr	r1, [pc, #128]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004162:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004168:	f043 0310 	orr.w	r3, r3, #16
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004180:	e00f      	b.n	80041a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d106      	bne.n	8004196 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800418e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004194:	e005      	b.n	80041a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 800419c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ae:	f7fc fb8d 	bl	80008cc <HAL_GetTick>
 80041b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041b4:	e008      	b.n	80041c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041b6:	f7fc fb89 	bl	80008cc <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <RCCEx_PLL2_Config+0x15c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	58024400 	.word	0x58024400
 80041e4:	ffff0007 	.word	0xffff0007

080041e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041f6:	4b53      	ldr	r3, [pc, #332]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d101      	bne.n	8004206 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e099      	b.n	800433a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004206:	4b4f      	ldr	r3, [pc, #316]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4e      	ldr	r2, [pc, #312]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 800420c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004212:	f7fc fb5b 	bl	80008cc <HAL_GetTick>
 8004216:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004218:	e008      	b.n	800422c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800421a:	f7fc fb57 	bl	80008cc <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e086      	b.n	800433a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800422c:	4b45      	ldr	r3, [pc, #276]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004238:	4b42      	ldr	r3, [pc, #264]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	051b      	lsls	r3, r3, #20
 8004246:	493f      	ldr	r1, [pc, #252]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	628b      	str	r3, [r1, #40]	; 0x28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	3b01      	subs	r3, #1
 8004252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	3b01      	subs	r3, #1
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	b29b      	uxth	r3, r3
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	3b01      	subs	r3, #1
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800427c:	4931      	ldr	r1, [pc, #196]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004282:	4b30      	ldr	r3, [pc, #192]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	492d      	ldr	r1, [pc, #180]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004294:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4928      	ldr	r1, [pc, #160]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80042a6:	4b27      	ldr	r3, [pc, #156]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	4a26      	ldr	r2, [pc, #152]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <RCCEx_PLL3_Config+0x160>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	69d2      	ldr	r2, [r2, #28]
 80042be:	00d2      	lsls	r2, r2, #3
 80042c0:	4920      	ldr	r1, [pc, #128]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80042c6:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80042d8:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4a19      	ldr	r2, [pc, #100]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042e4:	e00f      	b.n	8004306 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042ec:	4b15      	ldr	r3, [pc, #84]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4a14      	ldr	r2, [pc, #80]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042f8:	e005      	b.n	8004306 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	4a11      	ldr	r2, [pc, #68]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 8004300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004312:	f7fc fadb 	bl	80008cc <HAL_GetTick>
 8004316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004318:	e008      	b.n	800432c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800431a:	f7fc fad7 	bl	80008cc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e006      	b.n	800433a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <RCCEx_PLL3_Config+0x15c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004338:	7bfb      	ldrb	r3, [r7, #15]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	58024400 	.word	0x58024400
 8004348:	ffff0007 	.word	0xffff0007

0800434c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800434c:	b084      	sub	sp, #16
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	f107 001c 	add.w	r0, r7, #28
 800435a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d120      	bne.n	80043a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <USB_CoreInit+0xd4>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 fb14 	bl	80059c8 <USB_CoreReset>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e01a      	b.n	80043dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 fb08 	bl	80059c8 <USB_CoreReset>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
 80043ce:	e005      	b.n	80043dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d116      	bne.n	8004410 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <USB_CoreInit+0xd8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f043 0206 	orr.w	r2, r3, #6
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800441c:	b004      	add	sp, #16
 800441e:	4770      	bx	lr
 8004420:	ffbdffbf 	.word	0xffbdffbf
 8004424:	03ee0000 	.word	0x03ee0000

08004428 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d165      	bne.n	8004508 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a41      	ldr	r2, [pc, #260]	; (8004544 <USB_SetTurnaroundTime+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d906      	bls.n	8004452 <USB_SetTurnaroundTime+0x2a>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4a40      	ldr	r2, [pc, #256]	; (8004548 <USB_SetTurnaroundTime+0x120>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d202      	bcs.n	8004452 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800444c:	230f      	movs	r3, #15
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e062      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a3c      	ldr	r2, [pc, #240]	; (8004548 <USB_SetTurnaroundTime+0x120>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d306      	bcc.n	8004468 <USB_SetTurnaroundTime+0x40>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4a3b      	ldr	r2, [pc, #236]	; (800454c <USB_SetTurnaroundTime+0x124>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d202      	bcs.n	8004468 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004462:	230e      	movs	r3, #14
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e057      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a38      	ldr	r2, [pc, #224]	; (800454c <USB_SetTurnaroundTime+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d306      	bcc.n	800447e <USB_SetTurnaroundTime+0x56>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a37      	ldr	r2, [pc, #220]	; (8004550 <USB_SetTurnaroundTime+0x128>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d202      	bcs.n	800447e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004478:	230d      	movs	r3, #13
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e04c      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <USB_SetTurnaroundTime+0x128>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d306      	bcc.n	8004494 <USB_SetTurnaroundTime+0x6c>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4a32      	ldr	r2, [pc, #200]	; (8004554 <USB_SetTurnaroundTime+0x12c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d802      	bhi.n	8004494 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800448e:	230c      	movs	r3, #12
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e041      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <USB_SetTurnaroundTime+0x12c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d906      	bls.n	80044aa <USB_SetTurnaroundTime+0x82>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a2e      	ldr	r2, [pc, #184]	; (8004558 <USB_SetTurnaroundTime+0x130>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d802      	bhi.n	80044aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044a4:	230b      	movs	r3, #11
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e036      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <USB_SetTurnaroundTime+0x130>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d906      	bls.n	80044c0 <USB_SetTurnaroundTime+0x98>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a29      	ldr	r2, [pc, #164]	; (800455c <USB_SetTurnaroundTime+0x134>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d802      	bhi.n	80044c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044ba:	230a      	movs	r3, #10
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e02b      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a26      	ldr	r2, [pc, #152]	; (800455c <USB_SetTurnaroundTime+0x134>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d906      	bls.n	80044d6 <USB_SetTurnaroundTime+0xae>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a25      	ldr	r2, [pc, #148]	; (8004560 <USB_SetTurnaroundTime+0x138>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d202      	bcs.n	80044d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044d0:	2309      	movs	r3, #9
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e020      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4a21      	ldr	r2, [pc, #132]	; (8004560 <USB_SetTurnaroundTime+0x138>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d306      	bcc.n	80044ec <USB_SetTurnaroundTime+0xc4>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a20      	ldr	r2, [pc, #128]	; (8004564 <USB_SetTurnaroundTime+0x13c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d802      	bhi.n	80044ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044e6:	2308      	movs	r3, #8
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e015      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <USB_SetTurnaroundTime+0x13c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d906      	bls.n	8004502 <USB_SetTurnaroundTime+0xda>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <USB_SetTurnaroundTime+0x140>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d202      	bcs.n	8004502 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044fc:	2307      	movs	r3, #7
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	e00a      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004502:	2306      	movs	r3, #6
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e007      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800450e:	2309      	movs	r3, #9
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e001      	b.n	8004518 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004514:	2309      	movs	r3, #9
 8004516:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	00d8acbf 	.word	0x00d8acbf
 8004548:	00e4e1c0 	.word	0x00e4e1c0
 800454c:	00f42400 	.word	0x00f42400
 8004550:	01067380 	.word	0x01067380
 8004554:	011a499f 	.word	0x011a499f
 8004558:	01312cff 	.word	0x01312cff
 800455c:	014ca43f 	.word	0x014ca43f
 8004560:	016e3600 	.word	0x016e3600
 8004564:	01a6ab1f 	.word	0x01a6ab1f
 8004568:	01e84800 	.word	0x01e84800

0800456c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d106      	bne.n	80045dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e00b      	b.n	80045f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	e001      	b.n	80045f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e003      	b.n	80045fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045f4:	2032      	movs	r0, #50	; 0x32
 80045f6:	f7fc f975 	bl	80008e4 <HAL_Delay>

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004604:	b084      	sub	sp, #16
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	e009      	b.n	8004638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	3340      	adds	r3, #64	; 0x40
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	2200      	movs	r2, #0
 8004630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	3301      	adds	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b0e      	cmp	r3, #14
 800463c:	d9f2      	bls.n	8004624 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800463e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11c      	bne.n	800467e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004652:	f043 0302 	orr.w	r3, r3, #2
 8004656:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e005      	b.n	800468a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004690:	461a      	mov	r2, r3
 8004692:	2300      	movs	r3, #0
 8004694:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469c:	4619      	mov	r1, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a4:	461a      	mov	r2, r3
 80046a6:	680b      	ldr	r3, [r1, #0]
 80046a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10c      	bne.n	80046ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046b6:	2100      	movs	r1, #0
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f949 	bl	8004950 <USB_SetDevSpeed>
 80046be:	e008      	b.n	80046d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046c0:	2101      	movs	r1, #1
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f944 	bl	8004950 <USB_SetDevSpeed>
 80046c8:	e003      	b.n	80046d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046ca:	2103      	movs	r1, #3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f93f 	bl	8004950 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046d2:	2110      	movs	r1, #16
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f8f3 	bl	80048c0 <USB_FlushTxFifo>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f911 	bl	800490c <USB_FlushRxFifo>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	461a      	mov	r2, r3
 80046fc:	2300      	movs	r3, #0
 80046fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	e043      	b.n	80047a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004734:	d118      	bne.n	8004768 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	461a      	mov	r2, r3
 800474a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e013      	b.n	800477a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	461a      	mov	r2, r3
 8004760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e008      	b.n	800477a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	2300      	movs	r3, #0
 8004778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004786:	461a      	mov	r2, r3
 8004788:	2300      	movs	r3, #0
 800478a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	461a      	mov	r2, r3
 800479a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800479e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3301      	adds	r3, #1
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3b7      	bcc.n	800471e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e043      	b.n	800483c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ca:	d118      	bne.n	80047fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e013      	b.n	8004810 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	461a      	mov	r2, r3
 80047f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e008      	b.n	8004810 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	461a      	mov	r2, r3
 800481e:	2300      	movs	r3, #0
 8004820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	461a      	mov	r2, r3
 8004830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d3b7      	bcc.n	80047b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004856:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004864:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f043 0210 	orr.w	r2, r3, #16
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <USB_DevInit+0x2b4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f043 0208 	orr.w	r2, r3, #8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <USB_DevInit+0x2b8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048b4:	b004      	add	sp, #16
 80048b6:	4770      	bx	lr
 80048b8:	803c3800 	.word	0x803c3800
 80048bc:	40000004 	.word	0x40000004

080048c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <USB_FlushTxFifo+0x48>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e006      	b.n	80048fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d0f0      	beq.n	80048da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	00030d40 	.word	0x00030d40

0800490c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2210      	movs	r2, #16
 800491c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <USB_FlushRxFifo+0x40>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e006      	b.n	800493e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b10      	cmp	r3, #16
 800493a:	d0f0      	beq.n	800491e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	00030d40 	.word	0x00030d40

08004950 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004982:	b480      	push	{r7}
 8004984:	b087      	sub	sp, #28
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0306 	and.w	r3, r3, #6
 800499a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]
 80049a6:	e00a      	b.n	80049be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d002      	beq.n	80049b4 <USB_GetDevSpeed+0x32>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d102      	bne.n	80049ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049b4:	2302      	movs	r3, #2
 80049b6:	75fb      	strb	r3, [r7, #23]
 80049b8:	e001      	b.n	80049be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049ba:	230f      	movs	r3, #15
 80049bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d139      	bne.n	8004a5c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	2101      	movs	r1, #1
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d153      	bne.n	8004ac8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	78db      	ldrb	r3, [r3, #3]
 8004a3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	059b      	lsls	r3, r3, #22
 8004a42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	0159      	lsls	r1, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	4619      	mov	r1, r3
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <USB_ActivateEndpoint+0x10c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]
 8004a5a:	e035      	b.n	8004ac8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	68f9      	ldr	r1, [r7, #12]
 8004a76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d119      	bne.n	8004ac8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	78db      	ldrb	r3, [r3, #3]
 8004aae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	0159      	lsls	r1, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	440b      	add	r3, r1
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <USB_ActivateEndpoint+0x10c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	10008000 	.word	0x10008000

08004adc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d161      	bne.n	8004bbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b0e:	d11f      	bne.n	8004b50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	2101      	movs	r1, #1
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b70:	4013      	ands	r3, r2
 8004b72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	2101      	movs	r1, #1
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b94:	4013      	ands	r3, r2
 8004b96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	0159      	lsls	r1, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	440b      	add	r3, r1
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <USB_DeactivateEndpoint+0x1b0>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
 8004bba:	e060      	b.n	8004c7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bd2:	d11f      	bne.n	8004c14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	2101      	movs	r1, #1
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c34:	4013      	ands	r3, r2
 8004c36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	43db      	mvns	r3, r3
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	0159      	lsls	r1, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	440b      	add	r3, r1
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	4619      	mov	r1, r3
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <USB_DeactivateEndpoint+0x1b4>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	ec337800 	.word	0xec337800
 8004c90:	eff37800 	.word	0xeff37800

08004c94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	f040 8163 	bne.w	8004f7c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d132      	bne.n	8004d24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	0159      	lsls	r1, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4ba5      	ldr	r3, [pc, #660]	; (8004f70 <USB_EPStartXfer+0x2dc>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	0159      	lsls	r1, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	440b      	add	r3, r1
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4b95      	ldr	r3, [pc, #596]	; (8004f74 <USB_EPStartXfer+0x2e0>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	610b      	str	r3, [r1, #16]
 8004d22:	e074      	b.n	8004e0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	0159      	lsls	r1, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	440b      	add	r3, r1
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <USB_EPStartXfer+0x2e0>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	0159      	lsls	r1, r3, #5
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	4619      	mov	r1, r3
 8004d62:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <USB_EPStartXfer+0x2dc>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6959      	ldr	r1, [r3, #20]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	440b      	add	r3, r1
 8004d80:	1e59      	subs	r1, r3, #1
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d8a:	04d9      	lsls	r1, r3, #19
 8004d8c:	4b7a      	ldr	r3, [pc, #488]	; (8004f78 <USB_EPStartXfer+0x2e4>)
 8004d8e:	400b      	ands	r3, r1
 8004d90:	69b9      	ldr	r1, [r7, #24]
 8004d92:	0148      	lsls	r0, r1, #5
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	4401      	add	r1, r0
 8004d98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db6:	69b9      	ldr	r1, [r7, #24]
 8004db8:	0148      	lsls	r0, r1, #5
 8004dba:	69f9      	ldr	r1, [r7, #28]
 8004dbc:	4401      	add	r1, r0
 8004dbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	78db      	ldrb	r3, [r3, #3]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d11f      	bne.n	8004e0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004dec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d14b      	bne.n	8004eac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	78db      	ldrb	r3, [r3, #3]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d128      	bne.n	8004e8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d110      	bne.n	8004e6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	e00f      	b.n	8004e8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e133      	b.n	8005114 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	78db      	ldrb	r3, [r3, #3]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d015      	beq.n	8004f00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 811b 	beq.w	8005114 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	2101      	movs	r1, #1
 8004ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef4:	69f9      	ldr	r1, [r7, #28]
 8004ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efa:	4313      	orrs	r3, r2
 8004efc:	634b      	str	r3, [r1, #52]	; 0x34
 8004efe:	e109      	b.n	8005114 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d110      	bne.n	8004f32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	e00f      	b.n	8004f52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	68d9      	ldr	r1, [r3, #12]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	b298      	uxth	r0, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fa38 	bl	80053dc <USB_WritePacket>
 8004f6c:	e0d2      	b.n	8005114 <USB_EPStartXfer+0x480>
 8004f6e:	bf00      	nop
 8004f70:	e007ffff 	.word	0xe007ffff
 8004f74:	fff80000 	.word	0xfff80000
 8004f78:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	0159      	lsls	r1, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	440b      	add	r3, r1
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	4619      	mov	r1, r3
 8004f98:	4b61      	ldr	r3, [pc, #388]	; (8005120 <USB_EPStartXfer+0x48c>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	0159      	lsls	r1, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	440b      	add	r3, r1
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4b5a      	ldr	r3, [pc, #360]	; (8005124 <USB_EPStartXfer+0x490>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d123      	bne.n	8005010 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fde:	69b9      	ldr	r1, [r7, #24]
 8004fe0:	0148      	lsls	r0, r1, #5
 8004fe2:	69f9      	ldr	r1, [r7, #28]
 8004fe4:	4401      	add	r1, r0
 8004fe6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fea:	4313      	orrs	r3, r2
 8004fec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800500c:	6113      	str	r3, [r2, #16]
 800500e:	e033      	b.n	8005078 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4413      	add	r3, r2
 800501a:	1e5a      	subs	r2, r3, #1
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	04d9      	lsls	r1, r3, #19
 8005038:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <USB_EPStartXfer+0x494>)
 800503a:	400b      	ands	r3, r1
 800503c:	69b9      	ldr	r1, [r7, #24]
 800503e:	0148      	lsls	r0, r1, #5
 8005040:	69f9      	ldr	r1, [r7, #28]
 8005042:	4401      	add	r1, r0
 8005044:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005048:	4313      	orrs	r3, r2
 800504a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	8af9      	ldrh	r1, [r7, #22]
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	0148      	lsls	r0, r1, #5
 800506c:	69f9      	ldr	r1, [r7, #28]
 800506e:	4401      	add	r1, r0
 8005070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005074:	4313      	orrs	r3, r2
 8005076:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d10d      	bne.n	800509a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	460a      	mov	r2, r1
 8005098:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	78db      	ldrb	r3, [r3, #3]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d128      	bne.n	80050f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d110      	bne.n	80050d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e00f      	b.n	80050f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	fff80000 	.word	0xfff80000
 8005124:	e007ffff 	.word	0xe007ffff
 8005128:	1ff80000 	.word	0x1ff80000

0800512c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b01      	cmp	r3, #1
 800514a:	f040 80cd 	bne.w	80052e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d132      	bne.n	80051bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	0159      	lsls	r1, r3, #5
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	440b      	add	r3, r1
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	4619      	mov	r1, r3
 8005172:	4b98      	ldr	r3, [pc, #608]	; (80053d4 <USB_EP0StartXfer+0x2a8>)
 8005174:	4013      	ands	r3, r2
 8005176:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005196:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	0159      	lsls	r1, r3, #5
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	440b      	add	r3, r1
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	4619      	mov	r1, r3
 80051b4:	4b88      	ldr	r3, [pc, #544]	; (80053d8 <USB_EP0StartXfer+0x2ac>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]
 80051ba:	e04e      	b.n	800525a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	0159      	lsls	r1, r3, #5
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	440b      	add	r3, r1
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	4619      	mov	r1, r3
 80051d8:	4b7f      	ldr	r3, [pc, #508]	; (80053d8 <USB_EP0StartXfer+0x2ac>)
 80051da:	4013      	ands	r3, r2
 80051dc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	0159      	lsls	r1, r3, #5
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	440b      	add	r3, r1
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	4619      	mov	r1, r3
 80051fa:	4b76      	ldr	r3, [pc, #472]	; (80053d4 <USB_EP0StartXfer+0x2a8>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524a:	6939      	ldr	r1, [r7, #16]
 800524c:	0148      	lsls	r0, r1, #5
 800524e:	6979      	ldr	r1, [r7, #20]
 8005250:	4401      	add	r1, r0
 8005252:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005256:	4313      	orrs	r3, r2
 8005258:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d11e      	bne.n	800529e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	461a      	mov	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	e092      	b.n	80053c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d07e      	beq.n	80053c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e2:	4313      	orrs	r3, r2
 80052e4:	634b      	str	r3, [r1, #52]	; 0x34
 80052e6:	e06d      	b.n	80053c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	0159      	lsls	r1, r3, #5
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	440b      	add	r3, r1
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	4619      	mov	r1, r3
 8005304:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <USB_EP0StartXfer+0x2ac>)
 8005306:	4013      	ands	r3, r2
 8005308:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	0159      	lsls	r1, r3, #5
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	440b      	add	r3, r1
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	4619      	mov	r1, r3
 8005326:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <USB_EP0StartXfer+0x2a8>)
 8005328:	4013      	ands	r3, r2
 800532a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800535a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005372:	6939      	ldr	r1, [r7, #16]
 8005374:	0148      	lsls	r0, r1, #5
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	4401      	add	r1, r0
 800537a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800537e:	4313      	orrs	r3, r2
 8005380:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10d      	bne.n	80053a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	68d9      	ldr	r1, [r3, #12]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	460a      	mov	r2, r1
 80053a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e007ffff 	.word	0xe007ffff
 80053d8:	fff80000 	.word	0xfff80000

080053dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	460b      	mov	r3, r1
 80053ec:	71fb      	strb	r3, [r7, #7]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80053fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d123      	bne.n	800544a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005402:	88bb      	ldrh	r3, [r7, #4]
 8005404:	3303      	adds	r3, #3
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	e018      	b.n	8005442 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	031a      	lsls	r2, r3, #12
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541c:	461a      	mov	r2, r3
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	3301      	adds	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3301      	adds	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3301      	adds	r3, #1
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d3e2      	bcc.n	8005410 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3724      	adds	r7, #36	; 0x24
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005458:	b480      	push	{r7}
 800545a:	b08b      	sub	sp, #44	; 0x2c
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	b29b      	uxth	r3, r3
 8005474:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	e014      	b.n	80054ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	3301      	adds	r3, #1
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	3301      	adds	r3, #1
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	3301      	adds	r3, #1
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	3301      	adds	r3, #1
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	3301      	adds	r3, #1
 80054ac:	623b      	str	r3, [r7, #32]
 80054ae:	6a3a      	ldr	r2, [r7, #32]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d3e6      	bcc.n	8005484 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054b6:	8bfb      	ldrh	r3, [r7, #30]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01e      	beq.n	80054fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c6:	461a      	mov	r2, r3
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	701a      	strb	r2, [r3, #0]
      i++;
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	3301      	adds	r3, #1
 80054e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	3301      	adds	r3, #1
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054ee:	8bfb      	ldrh	r3, [r7, #30]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054f4:	8bfb      	ldrh	r3, [r7, #30]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ea      	bne.n	80054d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	372c      	adds	r7, #44	; 0x2c
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d12c      	bne.n	800557e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	db12      	blt.n	800555c <USB_EPSetStall+0x54>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800555a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e02b      	b.n	80055d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	db12      	blt.n	80055b6 <USB_EPSetStall+0xae>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00f      	beq.n	80055b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d128      	bne.n	8005652 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	78db      	ldrb	r3, [r3, #3]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d003      	beq.n	8005630 <USB_EPClearStall+0x4c>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	78db      	ldrb	r3, [r3, #3]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d138      	bne.n	80056a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e027      	b.n	80056a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005670:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	78db      	ldrb	r3, [r3, #3]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d003      	beq.n	8005682 <USB_EPClearStall+0x9e>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	78db      	ldrb	r3, [r3, #3]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d10f      	bne.n	80056a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056e4:	68f9      	ldr	r1, [r7, #12]
 80056e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572a:	f023 0302 	bic.w	r3, r3, #2
 800572e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4013      	ands	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005798:	68fb      	ldr	r3, [r7, #12]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	0c1b      	lsrs	r3, r3, #16
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	4013      	ands	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	b29b      	uxth	r3, r3
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800583c:	68bb      	ldr	r3, [r7, #8]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	01db      	lsls	r3, r3, #7
 800587c:	b2db      	uxtb	r3, r3
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4013      	ands	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005898:	68bb      	ldr	r3, [r7, #8]
}
 800589a:	4618      	mov	r0, r3
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0301 	and.w	r3, r3, #1
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
	...

080058c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	4619      	mov	r1, r3
 80058e0:	4b09      	ldr	r3, [pc, #36]	; (8005908 <USB_ActivateSetup+0x44>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	fffff800 	.word	0xfffff800

0800590c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	460b      	mov	r3, r1
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	333c      	adds	r3, #60	; 0x3c
 8005922:	3304      	adds	r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <USB_EP0_OutStart+0xb8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d90a      	bls.n	8005946 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005940:	d101      	bne.n	8005946 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e037      	b.n	80059b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	461a      	mov	r2, r3
 800594e:	2300      	movs	r3, #0
 8005950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f043 0318 	orr.w	r3, r3, #24
 8005978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800598c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800598e:	7afb      	ldrb	r3, [r7, #11]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10f      	bne.n	80059b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	4f54300a 	.word	0x4f54300a

080059c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <USB_CoreReset+0x64>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e01b      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	daf2      	bge.n	80059d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <USB_CoreReset+0x64>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d0f0      	beq.n	80059fe <USB_CoreReset+0x36>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a40:	f002 f998 	bl	8007d74 <USBD_static_malloc>
 8005a44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d105      	bne.n	8005a58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a54:	2302      	movs	r3, #2
 8005a56:	e066      	b.n	8005b26 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7c1b      	ldrb	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d119      	bne.n	8005a9c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	2181      	movs	r1, #129	; 0x81
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f002 f85c 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a80:	2202      	movs	r2, #2
 8005a82:	2101      	movs	r1, #1
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f002 f852 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2210      	movs	r2, #16
 8005a96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a9a:	e016      	b.n	8005aca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a9c:	2340      	movs	r3, #64	; 0x40
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	2181      	movs	r1, #129	; 0x81
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 f843 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 f83a 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005aca:	2308      	movs	r3, #8
 8005acc:	2203      	movs	r2, #3
 8005ace:	2182      	movs	r1, #130	; 0x82
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f002 f82c 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7c1b      	ldrb	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 f8fd 	bl	8007d0c <USBD_LL_PrepareReceive>
 8005b12:	e007      	b.n	8005b24 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b1a:	2340      	movs	r3, #64	; 0x40
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f002 f8f4 	bl	8007d0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b3a:	2181      	movs	r1, #129	; 0x81
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f002 f81c 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f002 f815 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b58:	2182      	movs	r1, #130	; 0x82
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f002 f80d 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00e      	beq.n	8005b98 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f002 f900 	bl	8007d90 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e0af      	b.n	8005d2c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d03f      	beq.n	8005c58 <USBD_CDC_Setup+0xb4>
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	f040 809f 	bne.w	8005d1c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	88db      	ldrh	r3, [r3, #6]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d02e      	beq.n	8005c44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	b25b      	sxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	da16      	bge.n	8005c1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005bfc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	88d2      	ldrh	r2, [r2, #6]
 8005c02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	88db      	ldrh	r3, [r3, #6]
 8005c08:	2b07      	cmp	r3, #7
 8005c0a:	bf28      	it	cs
 8005c0c:	2307      	movcs	r3, #7
 8005c0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	89fa      	ldrh	r2, [r7, #14]
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 fb19 	bl	800724e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005c1c:	e085      	b.n	8005d2a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	785a      	ldrb	r2, [r3, #1]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	88db      	ldrh	r3, [r3, #6]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c34:	6939      	ldr	r1, [r7, #16]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	88db      	ldrh	r3, [r3, #6]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 fb32 	bl	80072a6 <USBD_CtlPrepareRx>
      break;
 8005c42:	e072      	b.n	8005d2a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	7850      	ldrb	r0, [r2, #1]
 8005c50:	2200      	movs	r2, #0
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	4798      	blx	r3
      break;
 8005c56:	e068      	b.n	8005d2a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b0b      	cmp	r3, #11
 8005c5e:	d852      	bhi.n	8005d06 <USBD_CDC_Setup+0x162>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <USBD_CDC_Setup+0xc4>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c99 	.word	0x08005c99
 8005c6c:	08005d15 	.word	0x08005d15
 8005c70:	08005d07 	.word	0x08005d07
 8005c74:	08005d07 	.word	0x08005d07
 8005c78:	08005d07 	.word	0x08005d07
 8005c7c:	08005d07 	.word	0x08005d07
 8005c80:	08005d07 	.word	0x08005d07
 8005c84:	08005d07 	.word	0x08005d07
 8005c88:	08005d07 	.word	0x08005d07
 8005c8c:	08005d07 	.word	0x08005d07
 8005c90:	08005cc3 	.word	0x08005cc3
 8005c94:	08005ced 	.word	0x08005ced
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d107      	bne.n	8005cb4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ca4:	f107 030a 	add.w	r3, r7, #10
 8005ca8:	2202      	movs	r2, #2
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 face 	bl	800724e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cb2:	e032      	b.n	8005d1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 fa58 	bl	800716c <USBD_CtlError>
            ret = USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	75fb      	strb	r3, [r7, #23]
          break;
 8005cc0:	e02b      	b.n	8005d1a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d107      	bne.n	8005cde <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cce:	f107 030d 	add.w	r3, r7, #13
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fab9 	bl	800724e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cdc:	e01d      	b.n	8005d1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 fa43 	bl	800716c <USBD_CtlError>
            ret = USBD_FAIL;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cea:	e016      	b.n	8005d1a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d00f      	beq.n	8005d18 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fa36 	bl	800716c <USBD_CtlError>
            ret = USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d04:	e008      	b.n	8005d18 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fa2f 	bl	800716c <USBD_CtlError>
          ret = USBD_FAIL;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	75fb      	strb	r3, [r7, #23]
          break;
 8005d12:	e002      	b.n	8005d1a <USBD_CDC_Setup+0x176>
          break;
 8005d14:	bf00      	nop
 8005d16:	e008      	b.n	8005d2a <USBD_CDC_Setup+0x186>
          break;
 8005d18:	bf00      	nop
      }
      break;
 8005d1a:	e006      	b.n	8005d2a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f001 fa24 	bl	800716c <USBD_CtlError>
      ret = USBD_FAIL;
 8005d24:	2303      	movs	r3, #3
 8005d26:	75fb      	strb	r3, [r7, #23]
      break;
 8005d28:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e04f      	b.n	8005df6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3318      	adds	r3, #24
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d029      	beq.n	8005dc8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d74:	78fa      	ldrb	r2, [r7, #3]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3318      	adds	r3, #24
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	78f9      	ldrb	r1, [r7, #3]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	1a5b      	subs	r3, r3, r1
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4403      	add	r3, r0
 8005d94:	3344      	adds	r3, #68	; 0x44
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d110      	bne.n	8005dc8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3318      	adds	r3, #24
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dba:	78f9      	ldrb	r1, [r7, #3]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 ff82 	bl	8007cca <USBD_LL_Transmit>
 8005dc6:	e015      	b.n	8005df4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e015      	b.n	8005e4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 ff92 	bl	8007d4e <USBD_LL_GetRxDataSize>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e46:	4611      	mov	r1, r2
 8005e48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e01b      	b.n	8005ea6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <USBD_CDC_EP0_RxReady+0x50>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e7e:	2bff      	cmp	r3, #255	; 0xff
 8005e80:	d010      	beq.n	8005ea4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e98:	b292      	uxth	r2, r2
 8005e9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	22ff      	movs	r2, #255	; 0xff
 8005ea0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2243      	movs	r2, #67	; 0x43
 8005ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	24000098 	.word	0x24000098

08005ed0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2243      	movs	r2, #67	; 0x43
 8005edc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ede:	4b03      	ldr	r3, [pc, #12]	; (8005eec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	24000054 	.word	0x24000054

08005ef0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2243      	movs	r2, #67	; 0x43
 8005efc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005efe:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	240000dc 	.word	0x240000dc

08005f10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f1e:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	24000010 	.word	0x24000010

08005f30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e004      	b.n	8005f4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f6c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e008      	b.n	8005f8a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e004      	b.n	8005fbc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fd6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e01a      	b.n	8006020 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d114      	bne.n	800601e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006012:	2181      	movs	r1, #129	; 0x81
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fe58 	bl	8007cca <USBD_LL_Transmit>

    ret = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006036:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006042:	2303      	movs	r3, #3
 8006044:	e016      	b.n	8006074 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	7c1b      	ldrb	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006058:	2101      	movs	r1, #1
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fe56 	bl	8007d0c <USBD_LL_PrepareReceive>
 8006060:	e007      	b.n	8006072 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	2101      	movs	r1, #1
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 fe4d 	bl	8007d0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006090:	2303      	movs	r3, #3
 8006092:	e01f      	b.n	80060d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	79fa      	ldrb	r2, [r7, #7]
 80060c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 fcc5 	bl	8007a58 <USBD_LL_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e016      	b.n	8006122 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	f107 020e 	add.w	r2, r7, #14
 8006114:	4610      	mov	r0, r2
 8006116:	4798      	blx	r3
 8006118:	4602      	mov	r2, r0
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fce0 	bl	8007af8 <USBD_LL_Start>
 8006138:	4603      	mov	r3, r0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006164:	2303      	movs	r3, #3
 8006166:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	4611      	mov	r1, r2
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
 8006182:	4603      	mov	r3, r0
 8006184:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	4611      	mov	r1, r2
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
  }

  return USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 ff90 	bl	80070f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d01a      	beq.n	8006232 <USBD_LL_SetupStage+0x72>
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d822      	bhi.n	8006246 <USBD_LL_SetupStage+0x86>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <USBD_LL_SetupStage+0x4a>
 8006204:	2b01      	cmp	r3, #1
 8006206:	d00a      	beq.n	800621e <USBD_LL_SetupStage+0x5e>
 8006208:	e01d      	b.n	8006246 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa62 	bl	80066dc <USBD_StdDevReq>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
      break;
 800621c:	e020      	b.n	8006260 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fac6 	bl	80067b8 <USBD_StdItfReq>
 800622c:	4603      	mov	r3, r0
 800622e:	73fb      	strb	r3, [r7, #15]
      break;
 8006230:	e016      	b.n	8006260 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fb05 	bl	800684a <USBD_StdEPReq>
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]
      break;
 8006244:	e00c      	b.n	8006260 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800624c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fcaf 	bl	8007bb8 <USBD_LL_StallEP>
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]
      break;
 800625e:	bf00      	nop
  }

  return ret;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	460b      	mov	r3, r1
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006278:	7afb      	ldrb	r3, [r7, #11]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d138      	bne.n	80062f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006284:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800628c:	2b03      	cmp	r3, #3
 800628e:	d14a      	bne.n	8006326 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	429a      	cmp	r2, r3
 800629a:	d913      	bls.n	80062c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	1ad2      	subs	r2, r2, r3
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	4293      	cmp	r3, r2
 80062b4:	bf28      	it	cs
 80062b6:	4613      	movcs	r3, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f001 f80f 	bl	80072e0 <USBD_CtlContinueRx>
 80062c2:	e030      	b.n	8006326 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d10b      	bne.n	80062e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f001 f80a 	bl	8007302 <USBD_CtlSendStatus>
 80062ee:	e01a      	b.n	8006326 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d114      	bne.n	8006326 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00e      	beq.n	8006326 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	7afa      	ldrb	r2, [r7, #11]
 8006312:	4611      	mov	r1, r2
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	4798      	blx	r3
 8006318:	4603      	mov	r3, r0
 800631a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	e000      	b.n	8006328 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	460b      	mov	r3, r1
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d16b      	bne.n	800641c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3314      	adds	r3, #20
 8006348:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006350:	2b02      	cmp	r3, #2
 8006352:	d156      	bne.n	8006402 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	429a      	cmp	r2, r3
 800635e:	d914      	bls.n	800638a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	1ad2      	subs	r2, r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	461a      	mov	r2, r3
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 ff84 	bl	8007284 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800637c:	2300      	movs	r3, #0
 800637e:	2200      	movs	r2, #0
 8006380:	2100      	movs	r1, #0
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 fcc2 	bl	8007d0c <USBD_LL_PrepareReceive>
 8006388:	e03b      	b.n	8006402 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	d11c      	bne.n	80063d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800639e:	429a      	cmp	r2, r3
 80063a0:	d316      	bcc.n	80063d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d20f      	bcs.n	80063d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063b0:	2200      	movs	r2, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 ff65 	bl	8007284 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063c2:	2300      	movs	r3, #0
 80063c4:	2200      	movs	r2, #0
 80063c6:	2100      	movs	r1, #0
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f001 fc9f 	bl	8007d0c <USBD_LL_PrepareReceive>
 80063ce:	e018      	b.n	8006402 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d10b      	bne.n	80063f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f001 fbde 	bl	8007bb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 ff93 	bl	8007328 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006408:	2b01      	cmp	r3, #1
 800640a:	d122      	bne.n	8006452 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff fe98 	bl	8006142 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800641a:	e01a      	b.n	8006452 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b03      	cmp	r3, #3
 8006426:	d114      	bne.n	8006452 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	7afa      	ldrb	r2, [r7, #11]
 800643e:	4611      	mov	r1, r2
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	4798      	blx	r3
 8006444:	4603      	mov	r3, r0
 8006446:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	e000      	b.n	8006454 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800648c:	2303      	movs	r3, #3
 800648e:	e02f      	b.n	80064f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00f      	beq.n	80064ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6852      	ldr	r2, [r2, #4]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	4611      	mov	r1, r2
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	2200      	movs	r2, #0
 80064be:	2100      	movs	r1, #0
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 fb34 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2240      	movs	r2, #64	; 0x40
 80064d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	2200      	movs	r2, #0
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fb26 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006526:	b2da      	uxtb	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2204      	movs	r2, #4
 8006532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b04      	cmp	r3, #4
 8006556:	d106      	bne.n	8006566 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800655e:	b2da      	uxtb	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006586:	2303      	movs	r3, #3
 8006588:	e012      	b.n	80065b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b03      	cmp	r3, #3
 8006594:	d10b      	bne.n	80065ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e014      	b.n	80065fc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d10d      	bne.n	80065fa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	4611      	mov	r1, r2
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800661a:	2303      	movs	r3, #3
 800661c:	e014      	b.n	8006648 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b03      	cmp	r3, #3
 8006628:	d10d      	bne.n	8006646 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	4611      	mov	r1, r2
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6852      	ldr	r2, [r2, #4]
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	4611      	mov	r1, r2
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
  }

  return USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800669e:	b480      	push	{r7}
 80066a0:	b087      	sub	sp, #28
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	3301      	adds	r3, #1
 80066b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066bc:	8a3b      	ldrh	r3, [r7, #16]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	b21a      	sxth	r2, r3
 80066c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	b21b      	sxth	r3, r3
 80066ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066cc:	89fb      	ldrh	r3, [r7, #14]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d005      	beq.n	8006702 <USBD_StdDevReq+0x26>
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d853      	bhi.n	80067a2 <USBD_StdDevReq+0xc6>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <USBD_StdDevReq+0x3a>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d14f      	bne.n	80067a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
      break;
 8006714:	e04a      	b.n	80067ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b09      	cmp	r3, #9
 800671c:	d83b      	bhi.n	8006796 <USBD_StdDevReq+0xba>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <USBD_StdDevReq+0x48>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006779 	.word	0x08006779
 8006728:	0800678d 	.word	0x0800678d
 800672c:	08006797 	.word	0x08006797
 8006730:	08006783 	.word	0x08006783
 8006734:	08006797 	.word	0x08006797
 8006738:	08006757 	.word	0x08006757
 800673c:	0800674d 	.word	0x0800674d
 8006740:	08006797 	.word	0x08006797
 8006744:	0800676f 	.word	0x0800676f
 8006748:	08006761 	.word	0x08006761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9de 	bl	8006b10 <USBD_GetDescriptor>
          break;
 8006754:	e024      	b.n	80067a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fb43 	bl	8006de4 <USBD_SetAddress>
          break;
 800675e:	e01f      	b.n	80067a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fb82 	bl	8006e6c <USBD_SetConfig>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
          break;
 800676c:	e018      	b.n	80067a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc21 	bl	8006fb8 <USBD_GetConfig>
          break;
 8006776:	e013      	b.n	80067a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc52 	bl	8007024 <USBD_GetStatus>
          break;
 8006780:	e00e      	b.n	80067a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc81 	bl	800708c <USBD_SetFeature>
          break;
 800678a:	e009      	b.n	80067a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fc90 	bl	80070b4 <USBD_ClrFeature>
          break;
 8006794:	e004      	b.n	80067a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fce7 	bl	800716c <USBD_CtlError>
          break;
 800679e:	bf00      	nop
      }
      break;
 80067a0:	e004      	b.n	80067ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fce1 	bl	800716c <USBD_CtlError>
      break;
 80067aa:	bf00      	nop
  }

  return ret;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop

080067b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d005      	beq.n	80067de <USBD_StdItfReq+0x26>
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d82f      	bhi.n	8006836 <USBD_StdItfReq+0x7e>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <USBD_StdItfReq+0x26>
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d12b      	bne.n	8006836 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d81d      	bhi.n	8006828 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	889b      	ldrh	r3, [r3, #4]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d813      	bhi.n	800681e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	88db      	ldrh	r3, [r3, #6]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d110      	bne.n	8006832 <USBD_StdItfReq+0x7a>
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fd73 	bl	8007302 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800681c:	e009      	b.n	8006832 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fca3 	bl	800716c <USBD_CtlError>
          break;
 8006826:	e004      	b.n	8006832 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc9e 	bl	800716c <USBD_CtlError>
          break;
 8006830:	e000      	b.n	8006834 <USBD_StdItfReq+0x7c>
          break;
 8006832:	bf00      	nop
      }
      break;
 8006834:	e004      	b.n	8006840 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc97 	bl	800716c <USBD_CtlError>
      break;
 800683e:	bf00      	nop
  }

  return ret;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	889b      	ldrh	r3, [r3, #4]
 800685c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d007      	beq.n	800687a <USBD_StdEPReq+0x30>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	f200 8145 	bhi.w	8006afa <USBD_StdEPReq+0x2b0>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00c      	beq.n	800688e <USBD_StdEPReq+0x44>
 8006874:	2b20      	cmp	r3, #32
 8006876:	f040 8140 	bne.w	8006afa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	e13a      	b.n	8006b04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b03      	cmp	r3, #3
 8006894:	d007      	beq.n	80068a6 <USBD_StdEPReq+0x5c>
 8006896:	2b03      	cmp	r3, #3
 8006898:	f300 8129 	bgt.w	8006aee <USBD_StdEPReq+0x2a4>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d07f      	beq.n	80069a0 <USBD_StdEPReq+0x156>
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d03c      	beq.n	800691e <USBD_StdEPReq+0xd4>
 80068a4:	e123      	b.n	8006aee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d002      	beq.n	80068b8 <USBD_StdEPReq+0x6e>
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d016      	beq.n	80068e4 <USBD_StdEPReq+0x9a>
 80068b6:	e02c      	b.n	8006912 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <USBD_StdEPReq+0x90>
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b80      	cmp	r3, #128	; 0x80
 80068c2:	d00a      	beq.n	80068da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 f975 	bl	8007bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 f971 	bl	8007bb8 <USBD_LL_StallEP>
 80068d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068d8:	e020      	b.n	800691c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc45 	bl	800716c <USBD_CtlError>
              break;
 80068e2:	e01b      	b.n	800691c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	885b      	ldrh	r3, [r3, #2]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10e      	bne.n	800690a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <USBD_StdEPReq+0xc0>
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b80      	cmp	r3, #128	; 0x80
 80068f6:	d008      	beq.n	800690a <USBD_StdEPReq+0xc0>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	88db      	ldrh	r3, [r3, #6]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f957 	bl	8007bb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fcf9 	bl	8007302 <USBD_CtlSendStatus>

              break;
 8006910:	e004      	b.n	800691c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fc29 	bl	800716c <USBD_CtlError>
              break;
 800691a:	bf00      	nop
          }
          break;
 800691c:	e0ec      	b.n	8006af8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d002      	beq.n	8006930 <USBD_StdEPReq+0xe6>
 800692a:	2b03      	cmp	r3, #3
 800692c:	d016      	beq.n	800695c <USBD_StdEPReq+0x112>
 800692e:	e030      	b.n	8006992 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <USBD_StdEPReq+0x108>
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d00a      	beq.n	8006952 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 f939 	bl	8007bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f935 	bl	8007bb8 <USBD_LL_StallEP>
 800694e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006950:	e025      	b.n	800699e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fc09 	bl	800716c <USBD_CtlError>
              break;
 800695a:	e020      	b.n	800699e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	885b      	ldrh	r3, [r3, #2]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11b      	bne.n	800699c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f93f 	bl	8007bf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fcc2 	bl	8007302 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006990:	e004      	b.n	800699c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fbe9 	bl	800716c <USBD_CtlError>
              break;
 800699a:	e000      	b.n	800699e <USBD_StdEPReq+0x154>
              break;
 800699c:	bf00      	nop
          }
          break;
 800699e:	e0ab      	b.n	8006af8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d002      	beq.n	80069b2 <USBD_StdEPReq+0x168>
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d032      	beq.n	8006a16 <USBD_StdEPReq+0x1cc>
 80069b0:	e097      	b.n	8006ae2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <USBD_StdEPReq+0x17e>
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	2b80      	cmp	r3, #128	; 0x80
 80069bc:	d004      	beq.n	80069c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fbd3 	bl	800716c <USBD_CtlError>
                break;
 80069c6:	e091      	b.n	8006aec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da0b      	bge.n	80069e8 <USBD_StdEPReq+0x19e>
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	3310      	adds	r3, #16
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4413      	add	r3, r2
 80069e4:	3304      	adds	r3, #4
 80069e6:	e00b      	b.n	8006a00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	3304      	adds	r3, #4
 8006a00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fc1d 	bl	800724e <USBD_CtlSendData>
              break;
 8006a14:	e06a      	b.n	8006aec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da11      	bge.n	8006a42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d117      	bne.n	8006a68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb96 	bl	800716c <USBD_CtlError>
                  break;
 8006a40:	e054      	b.n	8006aec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d104      	bne.n	8006a68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fb83 	bl	800716c <USBD_CtlError>
                  break;
 8006a66:	e041      	b.n	8006aec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	da0b      	bge.n	8006a88 <USBD_StdEPReq+0x23e>
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	3310      	adds	r3, #16
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	3304      	adds	r3, #4
 8006a86:	e00b      	b.n	8006aa0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <USBD_StdEPReq+0x264>
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d103      	bne.n	8006ab6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e00e      	b.n	8006ad4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 f8ba 	bl	8007c34 <USBD_LL_IsStallEP>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e002      	b.n	8006ad4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fbb7 	bl	800724e <USBD_CtlSendData>
              break;
 8006ae0:	e004      	b.n	8006aec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fb41 	bl	800716c <USBD_CtlError>
              break;
 8006aea:	bf00      	nop
          }
          break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb3b 	bl	800716c <USBD_CtlError>
          break;
 8006af6:	bf00      	nop
      }
      break;
 8006af8:	e004      	b.n	8006b04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fb35 	bl	800716c <USBD_CtlError>
      break;
 8006b02:	bf00      	nop
  }

  return ret;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	2b06      	cmp	r3, #6
 8006b32:	f200 8128 	bhi.w	8006d86 <USBD_GetDescriptor+0x276>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <USBD_GetDescriptor+0x2c>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b71 	.word	0x08006b71
 8006b44:	08006bb1 	.word	0x08006bb1
 8006b48:	08006d87 	.word	0x08006d87
 8006b4c:	08006d87 	.word	0x08006d87
 8006b50:	08006d27 	.word	0x08006d27
 8006b54:	08006d53 	.word	0x08006d53
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	7c12      	ldrb	r2, [r2, #16]
 8006b64:	f107 0108 	add.w	r1, r7, #8
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4798      	blx	r3
 8006b6c:	60f8      	str	r0, [r7, #12]
      break;
 8006b6e:	e112      	b.n	8006d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7c1b      	ldrb	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	f107 0208 	add.w	r2, r7, #8
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
 8006b88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	2202      	movs	r2, #2
 8006b90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b92:	e100      	b.n	8006d96 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	f107 0208 	add.w	r2, r7, #8
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
 8006ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	2202      	movs	r2, #2
 8006bac:	701a      	strb	r2, [r3, #0]
      break;
 8006bae:	e0f2      	b.n	8006d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	885b      	ldrh	r3, [r3, #2]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	f200 80ac 	bhi.w	8006d14 <USBD_GetDescriptor+0x204>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <USBD_GetDescriptor+0xb4>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006bdd 	.word	0x08006bdd
 8006bc8:	08006c11 	.word	0x08006c11
 8006bcc:	08006c45 	.word	0x08006c45
 8006bd0:	08006c79 	.word	0x08006c79
 8006bd4:	08006cad 	.word	0x08006cad
 8006bd8:	08006ce1 	.word	0x08006ce1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
 8006bf4:	f107 0108 	add.w	r1, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bfe:	e091      	b.n	8006d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fab2 	bl	800716c <USBD_CtlError>
            err++;
 8006c08:	7afb      	ldrb	r3, [r7, #11]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c0e:	e089      	b.n	8006d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	7c12      	ldrb	r2, [r2, #16]
 8006c28:	f107 0108 	add.w	r1, r7, #8
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
 8006c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c32:	e077      	b.n	8006d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa98 	bl	800716c <USBD_CtlError>
            err++;
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	72fb      	strb	r3, [r7, #11]
          break;
 8006c42:	e06f      	b.n	8006d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	7c12      	ldrb	r2, [r2, #16]
 8006c5c:	f107 0108 	add.w	r1, r7, #8
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c66:	e05d      	b.n	8006d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa7e 	bl	800716c <USBD_CtlError>
            err++;
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	3301      	adds	r3, #1
 8006c74:	72fb      	strb	r3, [r7, #11]
          break;
 8006c76:	e055      	b.n	8006d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	7c12      	ldrb	r2, [r2, #16]
 8006c90:	f107 0108 	add.w	r1, r7, #8
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c9a:	e043      	b.n	8006d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa64 	bl	800716c <USBD_CtlError>
            err++;
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8006caa:	e03b      	b.n	8006d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	7c12      	ldrb	r2, [r2, #16]
 8006cc4:	f107 0108 	add.w	r1, r7, #8
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4798      	blx	r3
 8006ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cce:	e029      	b.n	8006d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa4a 	bl	800716c <USBD_CtlError>
            err++;
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cde:	e021      	b.n	8006d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	7c12      	ldrb	r2, [r2, #16]
 8006cf8:	f107 0108 	add.w	r1, r7, #8
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d02:	e00f      	b.n	8006d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa30 	bl	800716c <USBD_CtlError>
            err++;
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	72fb      	strb	r3, [r7, #11]
          break;
 8006d12:	e007      	b.n	8006d24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa28 	bl	800716c <USBD_CtlError>
          err++;
 8006d1c:	7afb      	ldrb	r3, [r7, #11]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006d22:	bf00      	nop
      }
      break;
 8006d24:	e037      	b.n	8006d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7c1b      	ldrb	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d109      	bne.n	8006d42 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	f107 0208 	add.w	r2, r7, #8
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4798      	blx	r3
 8006d3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d40:	e029      	b.n	8006d96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fa11 	bl	800716c <USBD_CtlError>
        err++;
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d50:	e021      	b.n	8006d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7c1b      	ldrb	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10d      	bne.n	8006d76 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	f107 0208 	add.w	r2, r7, #8
 8006d66:	4610      	mov	r0, r2
 8006d68:	4798      	blx	r3
 8006d6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	2207      	movs	r2, #7
 8006d72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d74:	e00f      	b.n	8006d96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f9f7 	bl	800716c <USBD_CtlError>
        err++;
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	3301      	adds	r3, #1
 8006d82:	72fb      	strb	r3, [r7, #11]
      break;
 8006d84:	e007      	b.n	8006d96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f9ef 	bl	800716c <USBD_CtlError>
      err++;
 8006d8e:	7afb      	ldrb	r3, [r7, #11]
 8006d90:	3301      	adds	r3, #1
 8006d92:	72fb      	strb	r3, [r7, #11]
      break;
 8006d94:	bf00      	nop
  }

  if (err != 0U)
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11e      	bne.n	8006dda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	88db      	ldrh	r3, [r3, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d016      	beq.n	8006dd2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006da4:	893b      	ldrh	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00e      	beq.n	8006dc8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88da      	ldrh	r2, [r3, #6]
 8006dae:	893b      	ldrh	r3, [r7, #8]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	bf28      	it	cs
 8006db4:	4613      	movcs	r3, r2
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dba:	893b      	ldrh	r3, [r7, #8]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fa44 	bl	800724e <USBD_CtlSendData>
 8006dc6:	e009      	b.n	8006ddc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9ce 	bl	800716c <USBD_CtlError>
 8006dd0:	e004      	b.n	8006ddc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa95 	bl	8007302 <USBD_CtlSendStatus>
 8006dd8:	e000      	b.n	8006ddc <USBD_GetDescriptor+0x2cc>
    return;
 8006dda:	bf00      	nop
  }
}
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop

08006de4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	889b      	ldrh	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d131      	bne.n	8006e5a <USBD_SetAddress+0x76>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d12d      	bne.n	8006e5a <USBD_SetAddress+0x76>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	885b      	ldrh	r3, [r3, #2]
 8006e02:	2b7f      	cmp	r3, #127	; 0x7f
 8006e04:	d829      	bhi.n	8006e5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	885b      	ldrh	r3, [r3, #2]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d104      	bne.n	8006e28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9a3 	bl	800716c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e26:	e01d      	b.n	8006e64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7bfa      	ldrb	r2, [r7, #15]
 8006e2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 ff29 	bl	8007c8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa61 	bl	8007302 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4e:	e009      	b.n	8006e64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e58:	e004      	b.n	8006e64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f985 	bl	800716c <USBD_CtlError>
  }
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	4b4c      	ldr	r3, [pc, #304]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e84:	4b4b      	ldr	r3, [pc, #300]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d905      	bls.n	8006e98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f96c 	bl	800716c <USBD_CtlError>
    return USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e088      	b.n	8006faa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d002      	beq.n	8006eaa <USBD_SetConfig+0x3e>
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d025      	beq.n	8006ef4 <USBD_SetConfig+0x88>
 8006ea8:	e071      	b.n	8006f8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006eaa:	4b42      	ldr	r3, [pc, #264]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01c      	beq.n	8006eec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006eb2:	4b40      	ldr	r3, [pc, #256]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ebc:	4b3d      	ldr	r3, [pc, #244]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff f948 	bl	8006158 <USBD_SetClassConfig>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f949 	bl	800716c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eda:	e065      	b.n	8006fa8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa10 	bl	8007302 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006eea:	e05d      	b.n	8006fa8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa08 	bl	8007302 <USBD_CtlSendStatus>
      break;
 8006ef2:	e059      	b.n	8006fa8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ef4:	4b2f      	ldr	r3, [pc, #188]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d112      	bne.n	8006f22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f04:	4b2b      	ldr	r3, [pc, #172]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f0e:	4b29      	ldr	r3, [pc, #164]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff f93b 	bl	8006190 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f9f1 	bl	8007302 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f20:	e042      	b.n	8006fa8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d02a      	beq.n	8006f86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff f929 	bl	8006190 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f3e:	4b1d      	ldr	r3, [pc, #116]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f48:	4b1a      	ldr	r3, [pc, #104]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff f902 	bl	8006158 <USBD_SetClassConfig>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00f      	beq.n	8006f7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f903 	bl	800716c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff f90e 	bl	8006190 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f7c:	e014      	b.n	8006fa8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9bf 	bl	8007302 <USBD_CtlSendStatus>
      break;
 8006f84:	e010      	b.n	8006fa8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f9bb 	bl	8007302 <USBD_CtlSendStatus>
      break;
 8006f8c:	e00c      	b.n	8006fa8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f8eb 	bl	800716c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <USBD_SetConfig+0x148>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff f8f7 	bl	8006190 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa6:	bf00      	nop
  }

  return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	240001b0 	.word	0x240001b0

08006fb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	88db      	ldrh	r3, [r3, #6]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d004      	beq.n	8006fd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f8cd 	bl	800716c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fd2:	e023      	b.n	800701c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	dc02      	bgt.n	8006fe6 <USBD_GetConfig+0x2e>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dc03      	bgt.n	8006fec <USBD_GetConfig+0x34>
 8006fe4:	e015      	b.n	8007012 <USBD_GetConfig+0x5a>
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d00b      	beq.n	8007002 <USBD_GetConfig+0x4a>
 8006fea:	e012      	b.n	8007012 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f927 	bl	800724e <USBD_CtlSendData>
        break;
 8007000:	e00c      	b.n	800701c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3304      	adds	r3, #4
 8007006:	2201      	movs	r2, #1
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f91f 	bl	800724e <USBD_CtlSendData>
        break;
 8007010:	e004      	b.n	800701c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f8a9 	bl	800716c <USBD_CtlError>
        break;
 800701a:	bf00      	nop
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2db      	uxtb	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	2b02      	cmp	r3, #2
 800703a:	d81e      	bhi.n	800707a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	88db      	ldrh	r3, [r3, #6]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d004      	beq.n	800704e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f890 	bl	800716c <USBD_CtlError>
        break;
 800704c:	e01a      	b.n	8007084 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f043 0202 	orr.w	r2, r3, #2
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	330c      	adds	r3, #12
 800706e:	2202      	movs	r2, #2
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f8eb 	bl	800724e <USBD_CtlSendData>
      break;
 8007078:	e004      	b.n	8007084 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f875 	bl	800716c <USBD_CtlError>
      break;
 8007082:	bf00      	nop
  }
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	885b      	ldrh	r3, [r3, #2]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d106      	bne.n	80070ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f92b 	bl	8007302 <USBD_CtlSendStatus>
  }
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d80b      	bhi.n	80070e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d10c      	bne.n	80070ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f910 	bl	8007302 <USBD_CtlSendStatus>
      }
      break;
 80070e2:	e004      	b.n	80070ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f840 	bl	800716c <USBD_CtlError>
      break;
 80070ec:	e000      	b.n	80070f0 <USBD_ClrFeature+0x3c>
      break;
 80070ee:	bf00      	nop
  }
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3301      	adds	r3, #1
 8007120:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff fabb 	bl	800669e <SWAPBYTE>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
 800713a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff faae 	bl	800669e <SWAPBYTE>
 8007142:	4603      	mov	r3, r0
 8007144:	461a      	mov	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff faa1 	bl	800669e <SWAPBYTE>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	80da      	strh	r2, [r3, #6]
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007176:	2180      	movs	r1, #128	; 0x80
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fd1d 	bl	8007bb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800717e:	2100      	movs	r1, #0
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fd19 	bl	8007bb8 <USBD_LL_StallEP>
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b086      	sub	sp, #24
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d036      	beq.n	8007212 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80071a8:	6938      	ldr	r0, [r7, #16]
 80071aa:	f000 f836 	bl	800721a <USBD_GetLen>
 80071ae:	4603      	mov	r3, r0
 80071b0:	3301      	adds	r3, #1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4413      	add	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	3301      	adds	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	4413      	add	r3, r2
 80071d4:	2203      	movs	r2, #3
 80071d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	3301      	adds	r3, #1
 80071dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071de:	e013      	b.n	8007208 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	3301      	adds	r3, #1
 80071f0:	613b      	str	r3, [r7, #16]
    idx++;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	3301      	adds	r3, #1
 80071f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
    idx++;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	3301      	adds	r3, #1
 8007206:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e7      	bne.n	80071e0 <USBD_GetString+0x52>
 8007210:	e000      	b.n	8007214 <USBD_GetString+0x86>
    return;
 8007212:	bf00      	nop
  }
}
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800722a:	e005      	b.n	8007238 <USBD_GetLen+0x1e>
  {
    len++;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	3301      	adds	r3, #1
 8007230:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	3301      	adds	r3, #1
 8007236:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f5      	bne.n	800722c <USBD_GetLen+0x12>
  }

  return len;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2202      	movs	r2, #2
 800725e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	2100      	movs	r1, #0
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fd28 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	2100      	movs	r1, #0
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fd17 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2203      	movs	r2, #3
 80072b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	2100      	movs	r1, #0
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fd1b 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	2100      	movs	r1, #0
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fd0a 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2204      	movs	r2, #4
 800730e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fcd6 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2205      	movs	r2, #5
 8007334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007338:	2300      	movs	r3, #0
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fce4 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007354:	2200      	movs	r2, #0
 8007356:	4913      	ldr	r1, [pc, #76]	; (80073a4 <MX_USB_DEVICE_Init+0x54>)
 8007358:	4813      	ldr	r0, [pc, #76]	; (80073a8 <MX_USB_DEVICE_Init+0x58>)
 800735a:	f7fe fe8f 	bl	800607c <USBD_Init>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007364:	f7f9 f920 	bl	80005a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007368:	4910      	ldr	r1, [pc, #64]	; (80073ac <MX_USB_DEVICE_Init+0x5c>)
 800736a:	480f      	ldr	r0, [pc, #60]	; (80073a8 <MX_USB_DEVICE_Init+0x58>)
 800736c:	f7fe feb6 	bl	80060dc <USBD_RegisterClass>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007376:	f7f9 f917 	bl	80005a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800737a:	490d      	ldr	r1, [pc, #52]	; (80073b0 <MX_USB_DEVICE_Init+0x60>)
 800737c:	480a      	ldr	r0, [pc, #40]	; (80073a8 <MX_USB_DEVICE_Init+0x58>)
 800737e:	f7fe fdd7 	bl	8005f30 <USBD_CDC_RegisterInterface>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007388:	f7f9 f90e 	bl	80005a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800738c:	4806      	ldr	r0, [pc, #24]	; (80073a8 <MX_USB_DEVICE_Init+0x58>)
 800738e:	f7fe fecc 	bl	800612a <USBD_Start>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007398:	f7f9 f906 	bl	80005a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800739c:	f7fa ffae 	bl	80022fc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073a0:	bf00      	nop
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	24000134 	.word	0x24000134
 80073a8:	240001b4 	.word	0x240001b4
 80073ac:	2400001c 	.word	0x2400001c
 80073b0:	24000120 	.word	0x24000120

080073b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80073b8:	2200      	movs	r2, #0
 80073ba:	4905      	ldr	r1, [pc, #20]	; (80073d0 <CDC_Init_FS+0x1c>)
 80073bc:	4805      	ldr	r0, [pc, #20]	; (80073d4 <CDC_Init_FS+0x20>)
 80073be:	f7fe fdcc 	bl	8005f5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80073c2:	4905      	ldr	r1, [pc, #20]	; (80073d8 <CDC_Init_FS+0x24>)
 80073c4:	4803      	ldr	r0, [pc, #12]	; (80073d4 <CDC_Init_FS+0x20>)
 80073c6:	f7fe fde6 	bl	8005f96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	24000c84 	.word	0x24000c84
 80073d4:	240001b4 	.word	0x240001b4
 80073d8:	24000484 	.word	0x24000484

080073dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	6039      	str	r1, [r7, #0]
 80073f6:	71fb      	strb	r3, [r7, #7]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	2b23      	cmp	r3, #35	; 0x23
 8007400:	d84a      	bhi.n	8007498 <CDC_Control_FS+0xac>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <CDC_Control_FS+0x1c>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007499 	.word	0x08007499
 800740c:	08007499 	.word	0x08007499
 8007410:	08007499 	.word	0x08007499
 8007414:	08007499 	.word	0x08007499
 8007418:	08007499 	.word	0x08007499
 800741c:	08007499 	.word	0x08007499
 8007420:	08007499 	.word	0x08007499
 8007424:	08007499 	.word	0x08007499
 8007428:	08007499 	.word	0x08007499
 800742c:	08007499 	.word	0x08007499
 8007430:	08007499 	.word	0x08007499
 8007434:	08007499 	.word	0x08007499
 8007438:	08007499 	.word	0x08007499
 800743c:	08007499 	.word	0x08007499
 8007440:	08007499 	.word	0x08007499
 8007444:	08007499 	.word	0x08007499
 8007448:	08007499 	.word	0x08007499
 800744c:	08007499 	.word	0x08007499
 8007450:	08007499 	.word	0x08007499
 8007454:	08007499 	.word	0x08007499
 8007458:	08007499 	.word	0x08007499
 800745c:	08007499 	.word	0x08007499
 8007460:	08007499 	.word	0x08007499
 8007464:	08007499 	.word	0x08007499
 8007468:	08007499 	.word	0x08007499
 800746c:	08007499 	.word	0x08007499
 8007470:	08007499 	.word	0x08007499
 8007474:	08007499 	.word	0x08007499
 8007478:	08007499 	.word	0x08007499
 800747c:	08007499 	.word	0x08007499
 8007480:	08007499 	.word	0x08007499
 8007484:	08007499 	.word	0x08007499
 8007488:	08007499 	.word	0x08007499
 800748c:	08007499 	.word	0x08007499
 8007490:	08007499 	.word	0x08007499
 8007494:	08007499 	.word	0x08007499
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007498:	bf00      	nop
  }

  return (USBD_OK);
 800749a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4808      	ldr	r0, [pc, #32]	; (80074d8 <CDC_Receive_FS+0x30>)
 80074b6:	f7fe fd6e 	bl	8005f96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074ba:	4807      	ldr	r0, [pc, #28]	; (80074d8 <CDC_Receive_FS+0x30>)
 80074bc:	f7fe fdb4 	bl	8006028 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(UserRxBufferFS, *Len);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <CDC_Receive_FS+0x34>)
 80074c8:	f7f8 ff06 	bl	80002d8 <CDC_ReceiveCallback>
  return (USBD_OK);
 80074cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	240001b4 	.word	0x240001b4
 80074dc:	24000484 	.word	0x24000484

080074e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <CDC_Transmit_FS+0x48>)
 80074f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007502:	2301      	movs	r3, #1
 8007504:	e00b      	b.n	800751e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007506:	887b      	ldrh	r3, [r7, #2]
 8007508:	461a      	mov	r2, r3
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4806      	ldr	r0, [pc, #24]	; (8007528 <CDC_Transmit_FS+0x48>)
 800750e:	f7fe fd24 	bl	8005f5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007512:	4805      	ldr	r0, [pc, #20]	; (8007528 <CDC_Transmit_FS+0x48>)
 8007514:	f7fe fd58 	bl	8005fc8 <USBD_CDC_TransmitPacket>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	240001b4 	.word	0x240001b4

0800752c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800753e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007542:	4618      	mov	r0, r3
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	6039      	str	r1, [r7, #0]
 800755a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2212      	movs	r2, #18
 8007560:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007562:	4b03      	ldr	r3, [pc, #12]	; (8007570 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	24000150 	.word	0x24000150

08007574 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	4603      	mov	r3, r0
 800757c:	6039      	str	r1, [r7, #0]
 800757e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2204      	movs	r2, #4
 8007584:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007586:	4b03      	ldr	r3, [pc, #12]	; (8007594 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	24000164 	.word	0x24000164

08007598 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4907      	ldr	r1, [pc, #28]	; (80075cc <USBD_FS_ProductStrDescriptor+0x34>)
 80075ae:	4808      	ldr	r0, [pc, #32]	; (80075d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80075b0:	f7ff fded 	bl	800718e <USBD_GetString>
 80075b4:	e004      	b.n	80075c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	4904      	ldr	r1, [pc, #16]	; (80075cc <USBD_FS_ProductStrDescriptor+0x34>)
 80075ba:	4805      	ldr	r0, [pc, #20]	; (80075d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80075bc:	f7ff fde7 	bl	800718e <USBD_GetString>
  }
  return USBD_StrDesc;
 80075c0:	4b02      	ldr	r3, [pc, #8]	; (80075cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	24001484 	.word	0x24001484
 80075d0:	08007e78 	.word	0x08007e78

080075d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	4904      	ldr	r1, [pc, #16]	; (80075f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075e4:	4804      	ldr	r0, [pc, #16]	; (80075f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075e6:	f7ff fdd2 	bl	800718e <USBD_GetString>
  return USBD_StrDesc;
 80075ea:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	24001484 	.word	0x24001484
 80075f8:	08007e90 	.word	0x08007e90

080075fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	221a      	movs	r2, #26
 800760c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800760e:	f000 f843 	bl	8007698 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007612:	4b02      	ldr	r3, [pc, #8]	; (800761c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	24000168 	.word	0x24000168

08007620 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4907      	ldr	r1, [pc, #28]	; (8007654 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007636:	4808      	ldr	r0, [pc, #32]	; (8007658 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007638:	f7ff fda9 	bl	800718e <USBD_GetString>
 800763c:	e004      	b.n	8007648 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4904      	ldr	r1, [pc, #16]	; (8007654 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007642:	4805      	ldr	r0, [pc, #20]	; (8007658 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007644:	f7ff fda3 	bl	800718e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007648:	4b02      	ldr	r3, [pc, #8]	; (8007654 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	24001484 	.word	0x24001484
 8007658:	08007ea4 	.word	0x08007ea4

0800765c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	6039      	str	r1, [r7, #0]
 8007666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d105      	bne.n	800767a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	4907      	ldr	r1, [pc, #28]	; (8007690 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007672:	4808      	ldr	r0, [pc, #32]	; (8007694 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007674:	f7ff fd8b 	bl	800718e <USBD_GetString>
 8007678:	e004      	b.n	8007684 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	4904      	ldr	r1, [pc, #16]	; (8007690 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800767e:	4805      	ldr	r0, [pc, #20]	; (8007694 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007680:	f7ff fd85 	bl	800718e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007684:	4b02      	ldr	r3, [pc, #8]	; (8007690 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	24001484 	.word	0x24001484
 8007694:	08007eb0 	.word	0x08007eb0

08007698 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <Get_SerialNum+0x44>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076a4:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <Get_SerialNum+0x48>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076aa:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <Get_SerialNum+0x4c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076be:	2208      	movs	r2, #8
 80076c0:	4909      	ldr	r1, [pc, #36]	; (80076e8 <Get_SerialNum+0x50>)
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f814 	bl	80076f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076c8:	2204      	movs	r2, #4
 80076ca:	4908      	ldr	r1, [pc, #32]	; (80076ec <Get_SerialNum+0x54>)
 80076cc:	68b8      	ldr	r0, [r7, #8]
 80076ce:	f000 f80f 	bl	80076f0 <IntToUnicode>
  }
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	1ff1e800 	.word	0x1ff1e800
 80076e0:	1ff1e804 	.word	0x1ff1e804
 80076e4:	1ff1e808 	.word	0x1ff1e808
 80076e8:	2400016a 	.word	0x2400016a
 80076ec:	2400017a 	.word	0x2400017a

080076f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]
 8007706:	e027      	b.n	8007758 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	0f1b      	lsrs	r3, r3, #28
 800770c:	2b09      	cmp	r3, #9
 800770e:	d80b      	bhi.n	8007728 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	0f1b      	lsrs	r3, r3, #28
 8007714:	b2da      	uxtb	r2, r3
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	4619      	mov	r1, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	440b      	add	r3, r1
 8007720:	3230      	adds	r2, #48	; 0x30
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e00a      	b.n	800773e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	0f1b      	lsrs	r3, r3, #28
 800772c:	b2da      	uxtb	r2, r3
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	4619      	mov	r1, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	440b      	add	r3, r1
 8007738:	3237      	adds	r2, #55	; 0x37
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	3301      	adds	r3, #1
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	3301      	adds	r3, #1
 8007756:	75fb      	strb	r3, [r7, #23]
 8007758:	7dfa      	ldrb	r2, [r7, #23]
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	429a      	cmp	r2, r3
 800775e:	d3d3      	bcc.n	8007708 <IntToUnicode+0x18>
  }
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b0b8      	sub	sp, #224	; 0xe0
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007778:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	605a      	str	r2, [r3, #4]
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007788:	f107 0310 	add.w	r3, r7, #16
 800778c:	22bc      	movs	r2, #188	; 0xbc
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fb57 	bl	8007e44 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a33      	ldr	r2, [pc, #204]	; (8007868 <HAL_PCD_MspInit+0xf8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d15e      	bne.n	800785e <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80077a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80077a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80077aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80077ae:	f107 0310 	add.w	r3, r7, #16
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fb fd20 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80077be:	f7f8 fef3 	bl	80005a8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80077c2:	f7fa fd9b 	bl	80022fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077c6:	4b29      	ldr	r3, [pc, #164]	; (800786c <HAL_PCD_MspInit+0xfc>)
 80077c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077cc:	4a27      	ldr	r2, [pc, #156]	; (800786c <HAL_PCD_MspInit+0xfc>)
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80077d6:	4b25      	ldr	r3, [pc, #148]	; (800786c <HAL_PCD_MspInit+0xfc>)
 80077d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80077e4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80077e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ec:	2302      	movs	r3, #2
 80077ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077f8:	2300      	movs	r3, #0
 80077fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80077fe:	230a      	movs	r3, #10
 8007800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007808:	4619      	mov	r1, r3
 800780a:	4819      	ldr	r0, [pc, #100]	; (8007870 <HAL_PCD_MspInit+0x100>)
 800780c:	f7f9 f9b0 	bl	8000b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007818:	2300      	movs	r3, #0
 800781a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781e:	2300      	movs	r3, #0
 8007820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007824:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007828:	4619      	mov	r1, r3
 800782a:	4811      	ldr	r0, [pc, #68]	; (8007870 <HAL_PCD_MspInit+0x100>)
 800782c:	f7f9 f9a0 	bl	8000b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <HAL_PCD_MspInit+0xfc>)
 8007832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007836:	4a0d      	ldr	r2, [pc, #52]	; (800786c <HAL_PCD_MspInit+0xfc>)
 8007838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800783c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <HAL_PCD_MspInit+0xfc>)
 8007842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800784a:	60bb      	str	r3, [r7, #8]
 800784c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800784e:	2200      	movs	r2, #0
 8007850:	2100      	movs	r1, #0
 8007852:	2065      	movs	r0, #101	; 0x65
 8007854:	f7f9 f951 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007858:	2065      	movs	r0, #101	; 0x65
 800785a:	f7f9 f968 	bl	8000b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800785e:	bf00      	nop
 8007860:	37e0      	adds	r7, #224	; 0xe0
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40080000 	.word	0x40080000
 800786c:	58024400 	.word	0x58024400
 8007870:	58020000 	.word	0x58020000

08007874 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007888:	4619      	mov	r1, r3
 800788a:	4610      	mov	r0, r2
 800788c:	f7fe fc98 	bl	80061c0 <USBD_LL_SetupStage>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	4619      	mov	r1, r3
 80078c2:	f7fe fcd2 	bl	800626a <USBD_LL_DataOutStage>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	3348      	adds	r3, #72	; 0x48
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	4619      	mov	r1, r3
 80078f6:	f7fe fd1b 	bl	8006330 <USBD_LL_DataInStage>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fe2f 	bl	8006574 <USBD_LL_SOF>
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007926:	2301      	movs	r3, #1
 8007928:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
 8007936:	e008      	b.n	800794a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d102      	bne.n	8007946 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007940:	2301      	movs	r3, #1
 8007942:	73fb      	strb	r3, [r7, #15]
 8007944:	e001      	b.n	800794a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007946:	f7f8 fe2f 	bl	80005a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007950:	7bfa      	ldrb	r2, [r7, #15]
 8007952:	4611      	mov	r1, r2
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fdcf 	bl	80064f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fd7b 	bl	800645c <USBD_LL_Reset>
}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fdca 	bl	8006518 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <HAL_PCD_SuspendCallback+0x48>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	4a03      	ldr	r2, [pc, #12]	; (80079b8 <HAL_PCD_SuspendCallback+0x48>)
 80079aa:	f043 0306 	orr.w	r3, r3, #6
 80079ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed00 	.word	0xe000ed00

080079bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fdba 	bl	8006544 <USBD_LL_Resume>
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ea:	78fa      	ldrb	r2, [r7, #3]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe fe08 	bl	8006604 <USBD_LL_IsoOUTIncomplete>
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fdd0 	bl	80065b8 <USBD_LL_IsoINIncomplete>
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fe0e 	bl	8006650 <USBD_LL_DevConnected>
}
 8007a34:	bf00      	nop
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fe0b 	bl	8006666 <USBD_LL_DevDisconnected>
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d13e      	bne.n	8007ae6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a68:	4a21      	ldr	r2, [pc, #132]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a1f      	ldr	r2, [pc, #124]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a78:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a7a:	4a1e      	ldr	r2, [pc, #120]	; (8007af4 <USBD_LL_Init+0x9c>)
 8007a7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8007a7e:	4b1c      	ldr	r3, [pc, #112]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a80:	2209      	movs	r2, #9
 8007a82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a84:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a86:	2202      	movs	r2, #2
 8007a88:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a8a:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a90:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a92:	2202      	movs	r2, #2
 8007a94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007a96:	4b16      	ldr	r3, [pc, #88]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <USBD_LL_Init+0x98>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <USBD_LL_Init+0x98>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <USBD_LL_Init+0x98>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007aae:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <USBD_LL_Init+0x98>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <USBD_LL_Init+0x98>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007aba:	480d      	ldr	r0, [pc, #52]	; (8007af0 <USBD_LL_Init+0x98>)
 8007abc:	f7f9 fa08 	bl	8000ed0 <HAL_PCD_Init>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8007ac6:	f7f8 fd6f 	bl	80005a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007aca:	2180      	movs	r1, #128	; 0x80
 8007acc:	4808      	ldr	r0, [pc, #32]	; (8007af0 <USBD_LL_Init+0x98>)
 8007ace:	f7fa fb9a 	bl	8002206 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ad2:	2240      	movs	r2, #64	; 0x40
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4806      	ldr	r0, [pc, #24]	; (8007af0 <USBD_LL_Init+0x98>)
 8007ad8:	f7fa fb4e 	bl	8002178 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007adc:	2280      	movs	r2, #128	; 0x80
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4803      	ldr	r0, [pc, #12]	; (8007af0 <USBD_LL_Init+0x98>)
 8007ae2:	f7fa fb49 	bl	8002178 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	24001684 	.word	0x24001684
 8007af4:	40080000 	.word	0x40080000

08007af8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f9 fb02 	bl	8001118 <HAL_PCD_Start>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f942 	bl	8007da4 <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	70fb      	strb	r3, [r7, #3]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70bb      	strb	r3, [r7, #2]
 8007b44:	4613      	mov	r3, r2
 8007b46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b56:	78bb      	ldrb	r3, [r7, #2]
 8007b58:	883a      	ldrh	r2, [r7, #0]
 8007b5a:	78f9      	ldrb	r1, [r7, #3]
 8007b5c:	f7f9 ff13 	bl	8001986 <HAL_PCD_EP_Open>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f91c 	bl	8007da4 <USBD_Get_USB_Status>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7f9 ff5c 	bl	8001a56 <HAL_PCD_EP_Close>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f8fd 	bl	8007da4 <USBD_Get_USB_Status>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fa f834 	bl	8001c44 <HAL_PCD_EP_SetStall>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 f8de 	bl	8007da4 <USBD_Get_USB_Status>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fa f879 	bl	8001d0c <HAL_PCD_EP_ClrStall>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f8bf 	bl	8007da4 <USBD_Get_USB_Status>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da0b      	bge.n	8007c68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	333e      	adds	r3, #62	; 0x3e
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	e00b      	b.n	8007c80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	4613      	mov	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7f9 fe46 	bl	800193c <HAL_PCD_SetAddress>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f874 	bl	8007da4 <USBD_Get_USB_Status>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ce8:	7af9      	ldrb	r1, [r7, #11]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f7f9 ff5f 	bl	8001bb0 <HAL_PCD_EP_Transmit>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f853 	bl	8007da4 <USBD_Get_USB_Status>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d02:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	607a      	str	r2, [r7, #4]
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d2a:	7af9      	ldrb	r1, [r7, #11]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	f7f9 fedb 	bl	8001aea <HAL_PCD_EP_Receive>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f832 	bl	8007da4 <USBD_Get_USB_Status>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d44:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7f9 ff0b 	bl	8001b80 <HAL_PCD_EP_GetRxCount>
 8007d6a:	4603      	mov	r3, r0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d7c:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <USBD_static_malloc+0x18>)
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	24001a8c 	.word	0x24001a8c

08007d90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d817      	bhi.n	8007de8 <USBD_Get_USB_Status+0x44>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <USBD_Get_USB_Status+0x1c>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007dd7 	.word	0x08007dd7
 8007dc8:	08007ddd 	.word	0x08007ddd
 8007dcc:	08007de3 	.word	0x08007de3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd4:	e00b      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dda:	e008      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
    break;
 8007de0:	e005      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	73fb      	strb	r3, [r7, #15]
    break;
 8007de6:	e002      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	73fb      	strb	r3, [r7, #15]
    break;
 8007dec:	bf00      	nop
  }
  return usb_status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <__libc_init_array>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4d0d      	ldr	r5, [pc, #52]	; (8007e34 <__libc_init_array+0x38>)
 8007e00:	4c0d      	ldr	r4, [pc, #52]	; (8007e38 <__libc_init_array+0x3c>)
 8007e02:	1b64      	subs	r4, r4, r5
 8007e04:	10a4      	asrs	r4, r4, #2
 8007e06:	2600      	movs	r6, #0
 8007e08:	42a6      	cmp	r6, r4
 8007e0a:	d109      	bne.n	8007e20 <__libc_init_array+0x24>
 8007e0c:	4d0b      	ldr	r5, [pc, #44]	; (8007e3c <__libc_init_array+0x40>)
 8007e0e:	4c0c      	ldr	r4, [pc, #48]	; (8007e40 <__libc_init_array+0x44>)
 8007e10:	f000 f820 	bl	8007e54 <_init>
 8007e14:	1b64      	subs	r4, r4, r5
 8007e16:	10a4      	asrs	r4, r4, #2
 8007e18:	2600      	movs	r6, #0
 8007e1a:	42a6      	cmp	r6, r4
 8007e1c:	d105      	bne.n	8007e2a <__libc_init_array+0x2e>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e24:	4798      	blx	r3
 8007e26:	3601      	adds	r6, #1
 8007e28:	e7ee      	b.n	8007e08 <__libc_init_array+0xc>
 8007e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2e:	4798      	blx	r3
 8007e30:	3601      	adds	r6, #1
 8007e32:	e7f2      	b.n	8007e1a <__libc_init_array+0x1e>
 8007e34:	08007ed0 	.word	0x08007ed0
 8007e38:	08007ed0 	.word	0x08007ed0
 8007e3c:	08007ed0 	.word	0x08007ed0
 8007e40:	08007ed4 	.word	0x08007ed4

08007e44 <memset>:
 8007e44:	4402      	add	r2, r0
 8007e46:	4603      	mov	r3, r0
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d100      	bne.n	8007e4e <memset+0xa>
 8007e4c:	4770      	bx	lr
 8007e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e52:	e7f9      	b.n	8007e48 <memset+0x4>

08007e54 <_init>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	bf00      	nop
 8007e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5a:	bc08      	pop	{r3}
 8007e5c:	469e      	mov	lr, r3
 8007e5e:	4770      	bx	lr

08007e60 <_fini>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr
